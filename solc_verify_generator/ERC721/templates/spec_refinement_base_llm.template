
contract Refinement {

    struct StateOld {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    struct StateNew {
        mapping (uint256 => address) _tokenOwner;
        mapping (uint256 => address) _tokenApprovals;
        mapping (address => uint256) _ownedTokensCount;
        mapping (address => mapping (address => bool)) _operatorApprovals;
    }

    StateOld abs;
    StateOld abs_old;
    StateNew con;
    StateNew con_old;


    /// @notice precondition abs._ownedTokensCount[_owner] == balance
    $balanceOf
    function balanceOf_post(address _owner) public view returns (uint256 balance);

    /// @notice precondition abs._tokenOwner[_tokenId] == _owner
    /// @notice precondition  _owner !=  address(0)
    $ownerOf
    function ownerOf_post(uint256 _tokenId) public view returns (address owner);

    /// @notice precondition abs._tokenApprovals[_tokenId] == _approved 
    $approve
    function approve_post(address _approved, uint256 _tokenId) public;

    /// @notice precondition abs._tokenOwner[_tokenId] != address(0)
    /// @notice precondition abs._tokenApprovals[_tokenId] == approved
    $getApproved
    function getApproved_post(uint256 _tokenId) public view returns (address operator);

    /// @notice precondition abs._operatorApprovals[msg.sender][_operator] == _approved
    $setApprovalForAll
    function setApprovalForAll_post(address _operator, bool _approved) public;

    /// @notice precondition abs._operatorApprovals[_owner][_operator] == approved
    $isApprovedForAll
    function isApprovedForAll_post(address _owner, address _operator) public view returns (bool);

    /// @notice  precondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice  precondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice  precondition  abs._tokenOwner[tokenId] == _to
    $transferFrom
    function transferFrom_post(address _from, address _to, uint256 tokenId) public;

    /// @notice  precondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice  precondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[_to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice  precondition  abs._tokenOwner[tokenId] == to
    $safeTransferFrom3
    function safeTransferFrom_post(address _from, address _to, uint256 tokenId) public;

    /// @notice  precondition ( ( abs._ownedTokensCount[_from] ==  abs_old._ownedTokensCount[_from] - 1  &&  _from  != _to ) || ( _from == _to )  ) 
    /// @notice  precondition ( ( abs._ownedTokensCount[_to] ==  abs_old._ownedTokensCount[_to] + 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice  precondition  abs._tokenOwner[tokenId] == _to
    $safeTransferFrom4
    function safeTransferFrom_post(address _from, address _to, uint256 tokenId, bytes memory data) public;


}
