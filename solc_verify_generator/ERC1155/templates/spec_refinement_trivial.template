contract Refinement {

    struct StateOld {
        mapping (uint256 => mapping(address => uint256)) _balances;
        mapping (address => mapping(address => bool)) _operatorApprovals;
    }

    struct StateNew {
        mapping (uint256 => mapping(address => uint256)) _balances;
        mapping (address => mapping(address => bool)) _operatorApprovals;
    }

    StateOld abs;
    StateOld abs_old;
    StateNew con;
    StateNew con_old;

    /// @notice precondition true
    /// @notice postcondition true
    function balanceOf_pre(address _owner, uint256 _id, uint256 balance) public view returns (uint256) {}

    $balanceOf
    function balanceOf_post(address _owner, uint256 _id, uint256 balance) public view returns (uint256) {}

    /// @notice precondition true
    /// @notice postcondition true
    function balanceOfBatch_pre(address[] memory _owners, uint256[] memory _ids, uint256[] memory batchBalances) public view returns (uint256[] memory) {}

    $balanceOfBatch
    function balanceOfBatch_post(address[] memory _owners, uint256[] memory _ids, uint256[] memory batchBalances) public view returns (uint256[] memory) {}

    /// @notice precondition true
    /// @notice postcondition true
    function setApprovalForAll_pre(address _operator, bool _approved) public {}

    $setApprovalForAll
    function setApprovalForAll_post(address _operator, bool _approved) public {}

    /// @notice precondition true
    /// @notice postcondition true
    function isApprovedForAll_pre(address _owner, address _operator, bool approved) public view returns (bool) {}

    $isApprovedForAll
    function isApprovedForAll_post(address _owner, address _operator, bool approved) public view returns (bool) {}

    /// @notice precondition true
    /// @notice postcondition true
    function safeTransferFrom_pre(address _from, address _to, uint256 _id, uint256 _value) public {}

    $safeTransferFrom
    function safeTransferFrom_post(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public {}

    /// @notice precondition true
    /// @notice postcondition true
    function safeBatchTransferFrom_pre(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public {}

    $safeBatchTransferFrom
    function safeBatchTransferFrom_post(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public {}
}
