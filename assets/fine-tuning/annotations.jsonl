{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add_to_x(int n) internal;"},{"role": "assistant", "content": "/// @notice precondition x == y\n/// @notice postcondition x == (y + n)\n/// @notice modifies x"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add(int n) public;"},{"role": "assistant", "content": "/// @notice modifies x if n > 0\n/// @notice modifies y if n > 0"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "pragma solidity >=0.5.0;"},{"role": "assistant", "content": "/// @notice invariant x == y"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition a == 0 || (a != 0 && c / a == b)\n/// @notice postcondition c == a * b"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function div(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition c == a / b"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition b <= a\n/// @notice postcondition a - b == c"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition c >= a\n/// @notice postcondition a + b == c"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function balanceOf(address _owner) public view returns (uint256 balance);"},{"role": "assistant", "content": "/// @notice postcondition balances[_owner] == balance"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transfer(address _receiver, uint256 _value) public returns (bool);"},{"role": "assistant", "content": "/// @notice postcondition _value > 0\n/// @notice postcondition balances[msg.sender] >= _value\n/// @notice postcondition balances[msg.sender] == __verifier_old_uint(balances[msg.sender]) - _value\n/// @notice postcondition balances[_receiver] == __verifier_old_uint(balances[_receiver]) + _value"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function batchTransfer(address[] memory _receivers, uint256 _value) public returns (bool);"},{"role": "assistant", "content": "/// @notice postcondition cnt > 0 && cnt <= 20\n/// @notice postcondition _value > 0 && balances[msg.sender] >= amount\n/// @notice invariant totalSupply == __verifier_sum_uint(balances) + (cnt - i) * _value\n/// @notice invariant i <= cnt"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function mul(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition a == 0 || (a != 0 && c / a == b)\n/// @notice postcondition c == a * b"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function div(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition c == a / b"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function sub(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition b <= a\n/// @notice postcondition a - b == c"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add(uint256 a, uint256 b) internal pure returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition c >= a\n/// @notice postcondition a + b == c"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function balanceOf(address _owner) public view returns (uint256 balance);"},{"role": "assistant", "content": "/// @notice postcondition balances[_owner] == balance"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transfer(address _receiver, uint256 _value) public returns (bool);"},{"role": "assistant", "content": "/// @notice postcondition _value > 0\n/// @notice postcondition balances[msg.sender] >= _value\n/// @notice postcondition balances[msg.sender] == __verifier_old_uint(balances[msg.sender]) - _value\n/// @notice postcondition balances[_receiver] == __verifier_old_uint(balances[_receiver]) + _value"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function batchTransfer(address[] memory _receivers, uint256 _value) public returns (bool);"},{"role": "assistant", "content": "/// @notice postcondition cnt > 0 && cnt <= 20\n/// @notice postcondition _value > 0 && balances[msg.sender] >= amount\n/// @notice invariant totalSupply == __verifier_sum_uint(balances) + (cnt - i) * _value\n/// @notice invariant i <= cnt"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function find(uint _elem) public view returns (uint index);"},{"role": "assistant", "content": "/// @notice postcondition property(a) (i) (a[i] != _elem || i == index)"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "pragma solidity >=0.5.0;"},{"role": "assistant", "content": "/// @notice invariant property(a) (i, j) (i >= j || a[i] < a[j])"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "uint[] a;"},{"role": "assistant", "content": ""}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function find(uint _elem) public view returns (uint index);"},{"role": "assistant", "content": "/// @notice invariant (0 <= left) && (left <= right) && (right <= a.length)\n/// @notice invariant property(a) (i) (i >= left || a[i] < _elem)\n/// @notice invariant property(a) (i) (i < right || _elem < a[i])"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function find(uint _elem) public view returns (uint index);"},{"role": "assistant", "content": "/// @notice invariant (0 <= lIndex) && (lIndex <= a.length)\n/// @notice invariant property(a) (i) (i >= lIndex || a[i] != _elem)\n/// @notice invariant !found || a[lIndex] == _elem"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function totalSupply() view external returns (uint256 supply);"},{"role": "assistant", "content": "/// @return total amount of tokens"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function balanceOf(address _owner) view external returns (uint256 balance);"},{"role": "assistant", "content": "/// @param _owner The address from which the balance will be retrieved\n/// @return The balance"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transfer(address _to, uint256 _value) external returns (bool success);"},{"role": "assistant", "content": "/// @notice send `_value` token to `_to` from `msg.sender`\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);"},{"role": "assistant", "content": "/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n/// @param _from The address of the sender\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function approve(address _spender, uint256 _value) external returns (bool success);"},{"role": "assistant", "content": "/// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @param _value The amount of wei to be approved for transfer\n/// @return Whether the approval was successful or not"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function allowance(address _owner, address _spender) view external returns (uint256 remaining);"},{"role": "assistant", "content": "/// @param _owner The address of the account owning tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @return Amount of remaining tokens allowed to spent"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "event new_entry(address at, int value);"},{"role": "assistant", "content": "/// @notice tracks-changes-in entries\n/// @notice precondition !entries[at].set\n/// @notice postcondition entries[at].set && entries[at].data == value"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "event updated_entry(address at, int value);"},{"role": "assistant", "content": "/// @notice tracks-changes-in entries\n/// @notice precondition entries[at].set && entries[at].data < value\n/// @notice postcondition entries[at].set && entries[at].data == value"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add(int value) public;"},{"role": "assistant", "content": "/// @notice emits new_entry"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function update(int value) public;"},{"role": "assistant", "content": "/// @notice emits updated_entry"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function add_or_update(int value) public;"},{"role": "assistant", "content": "/// @notice emits new_entry\n/// @notice emits updated_entry"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function changeOwner(address newOwner) public;"},{"role": "assistant", "content": "/// @notice modifies owner if msg.sender == owner"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function set(int data) public;"},{"role": "assistant", "content": "/// @notice modifies records[msg.sender] if !records[msg.sender].set\n/// @notice postcondition records[msg.sender].set\n/// @notice postcondition records[msg.sender].data == data"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function update(int data) public;"},{"role": "assistant", "content": "/// @notice modifies records[msg.sender].data if records[msg.sender].set\n/// @notice postcondition records[msg.sender].data == data"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function clear(address at) public;"},{"role": "assistant", "content": "/// @notice modifies records[msg.sender]\n/// @notice modifies records if msg.sender == owner\n/// @notice postcondition !records[at].set\n/// @notice postcondition records[at].data == 0"}]}