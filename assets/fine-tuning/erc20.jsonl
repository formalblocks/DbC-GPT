{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transfer(address _to, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint (_balances[msg.sender] ) - _value  && msg.sender  != _to ) ||   ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) &&  success )   || !success\n/// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) ||   ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to )  )   || !success"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint (_balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from == _to ) && success ) || !success\n/// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) && success ) || !success\n/// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint (_allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint (_allowed[_from ][msg.sender]) && !success) ||  _from  == msg.sender\n/// @notice  postcondition  _allowed[_from ][msg.sender]  <= __verifier_old_uint (_allowed[_from ][msg.sender] ) ||  _from  == msg.sender"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function approve(address _spender, uint256 _value) public returns (bool success);"},{"role": "assistant", "content": "/// @notice  postcondition (_allowed[msg.sender ][ _spender] ==  _value  &&  success) || ( _allowed[msg.sender ][ _spender] ==  __verifier_old_uint ( _allowed[msg.sender ][ _spender] ) && !success )"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function balanceOf(address _owner) public view returns (uint256 balance);"},{"role": "assistant", "content": "/// @notice postcondition _balances[_owner] == balance"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function allowance(address _owner, address _spender) public view returns (uint256 remaining);"},{"role": "assistant", "content": "/// @notice postcondition _allowed[_owner][_spender] == remaining"}]}
{"messages": [{"role": "system", "content": "Given an ERC token solidity function as input, return the function annotations in the format accepted by the solc-verify smart contract verifier, just this, nothing more."},{"role": "user", "content": "function totalSupply() external view returns (uint256);"},{"role": "assistant", "content": "/// @notice postcondition supply == _totalSupply"}]}