run,annotated_contract
1,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);
    
    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - value || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _balances[to] == __verifier_old_uint(_balances[to]) + value || _balances[to] == __verifier_old_uint(_balances[to])
    /// @notice postcondition _balances[msg.sender] >= 0
    function transfer(address to, uint value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[from] == __verifier_old_uint(_balances[from]) - value || _balances[from] == __verifier_old_uint(_balances[from])
    /// @notice postcondition _balances[to] == __verifier_old_uint(_balances[to]) + value || _balances[to] == __verifier_old_uint(_balances[to])
    /// @notice postcondition _allowed[from][msg.sender] == __verifier_old_uint(_allowed[from][msg.sender]) - value || _allowed[from][msg.sender] == __verifier_old_uint(_allowed[from][msg.sender])
    /// @notice postcondition _balances[from] >= 0
    function transferFrom(address from, address to, uint value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][spender] == value || _allowed[msg.sender][spender] == __verifier_old_uint(_allowed[msg.sender][spender])
    /// @notice postcondition _allowed[msg.sender][spender] == value
    function approve(address spender, uint value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[owner]
    function balanceOf(address owner) public view returns (uint balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[owner][spender]
    function allowance(address owner, address spender) public view returns (uint remaining);
}
"
3,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);
    
    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == _balances[msg.sender] - value || _balances[msg.sender] == _balances[msg.sender]
    /// @notice postcondition _balances[to] == _balances[to] + value || _balances[to] == _balances[to]
    /// @notice postcondition _balances[msg.sender] >= 0
    function transfer(address to, uint value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[from] == _balances[from] - value || _balances[from] == _balances[from]
    /// @notice postcondition _balances[to] == _balances[to] + value || _balances[to] == _balances[to]
    /// @notice postcondition _allowed[from][msg.sender] == _allowed[from][msg.sender] - value || _allowed[from][msg.sender] == _allowed[from][msg.sender]
    /// @notice postcondition _balances[from] >= 0
    function transferFrom(address from, address to, uint value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][spender] == value
    function approve(address spender, uint value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[owner]
    function balanceOf(address owner) public view returns (uint balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[owner][spender]
    function allowance(address owner, address spender) public view returns (uint remaining);
}
"
