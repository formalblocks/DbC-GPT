run,time_taken,iterations,verified,annotated_contract,status
1,30.5912082195282,0,True,"contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) ||   ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) ||   ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
2,35.566187620162964,0,True,"contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender][_spender] == _value && success
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
3,32.97628474235535,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
4,26.042370796203613,0,True,"contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) ||   ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) ||   ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success) 
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
5,39.9980628490448,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
6,28.671137809753418,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) ||   ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) ||   ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
7,25.39260959625244,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
8,27.296981811523438,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender][_spender] == _value && success
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
9,24.355448722839355,0,True,"contract ERC20 {
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender][_spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
10,23.457298040390015,0,True,"contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint ( _allowed[_from ][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition _allowed[msg.sender ][ _spender] == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
