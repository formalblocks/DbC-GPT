run,time_taken,iterations,verified,annotated_contract,status
1,200.203715801239,10,False,,[]
2,199.27296781539917,10,False,,"[""Interaction: 4\nERC165::supportsInterface: OK\nERC721::[constructor]: TIMEOUT\nERC721::balanceOf: OK\nERC721::ownerOf: TIMEOUT\nERC721::approve: TIMEOUT\nERC721::getApproved: TIMEOUT\nERC721::setApprovalForAll: TIMEOUT\nERC721::isApprovedForAll: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:85:5: Postcondition '_operatorApprovals[_owner][_operator] == true' might not hold at end of function.\nERC721::transferFrom: OK\nERC721::safeTransferFrom: TIMEOUT\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nInconclusive results.\nErrors were found by the verifier.\n\n""]"
3,180.19565677642822,10,False,,[]
4,175.0365149974823,10,False,,[]
5,161.42151308059692,10,False,,[]
6,290.2171790599823,10,False,,[]
7,155.54043769836426,10,False,,[]
8,159.49143481254578,10,False,,[]
9,152.83966183662415,10,False,,[]
10,80.29780101776123,3,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition balance == _ownedTokensCount[_owner]
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenId == 0 || _owner == __verifier_old_address(_owner)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition approved == _tokenApprovals[_tokenId]
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operator == _operator
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition _from == __verifier_old_address(_from) && _to == __verifier_old_address(_to)
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition _from == __verifier_old_address(_from) && _to == __verifier_old_address(_to)
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition _from == __verifier_old_address(_from) && _to == __verifier_old_address(_to)
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
