run,time_taken,iterations,verified,annotated_contract,status
1,21.724285125732422,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
2,22.04928708076477,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice postcondition ( _from != _to ) == ( __verifier_old_address(_from) != _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
3,156.28345251083374,10,False,,[]
4,164.96624970436096,10,False,,[]
5,21.734723806381226,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice  postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint ( _ownedTokensCount[_from] ) - 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice  postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint ( _ownedTokensCount[_to] ) + 1  &&  _from  != _to ) || ( _from  == _to ) )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
6,248.93594884872437,10,False,,"[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 2\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:93:5: Postcondition '( _from != _to )' might not hold at end of function.\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
7,24.413987159729004,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice  postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint ( _ownedTokensCount[_from] ) - 1  &&  _from  != _to ) || ( _from == _to ) )
    /// @notice  postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint ( _ownedTokensCount[_to] ) + 1  &&  _from  != _to ) || ( _from  == _to ) )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    /// @notice  postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint ( _ownedTokensCount[_from] ) - 1  &&  _from  != _to ) || ( _from  == _to ) )
    /// @notice  postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint ( _ownedTokensCount[_to] ) + 1  &&  _from  != _to ) || ( _from  == _to ) )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
8,21.58916974067688,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
9,23.201696395874023,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice  postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
10,23.348381996154785,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _tokenOwner[_tokenId] == _to )
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
