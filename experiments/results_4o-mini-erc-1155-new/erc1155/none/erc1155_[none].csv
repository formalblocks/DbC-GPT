run,time_taken,iterations,verified,annotated_contract,status
1,91.35924124717712,2,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    mapping (uint256 => mapping(address => uint256)) private _balances;
    mapping (address => mapping(address => bool)) private _operatorApprovals;
    string private _uri;

    /**
        @notice Get the balance of an account's tokens.
        @param _owner  The address of the token holder
        @param _id     ID of the token
        @return        The _owner's balance of the token type requested
    */
    /// @notice postcondition _balances[_id][_owner] == balance
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
        @notice Get the balance of multiple account/token pairs
        @param _owners The addresses of the token holders
        @param _ids    ID of the tokens
        @return        The _owner's balance of the token types requested (i.e. balance for each (owner, id) pair)
    */
    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition _owners.length == _ids.length
    /// @notice postcondition forall (uint i) (_owners.length == _ids.length) || (i >= _owners.length) || (_balances[_ids[i]][_owners[i]] == batchBalances[i])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
        @notice Enable or disable approval for a third party (""operator"") to manage all of the caller's tokens.
        @dev MUST emit the ApprovalForAll event on success.
        @param _operator  Address to add to the set of authorized operators
        @param _approved  True if the operator is approved, false to revoke approval
    */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
        @notice Queries the approval status of an operator for a given owner.
        @param _owner     The owner of the tokens
        @param _operator  Address of authorized operator
        @return           True if the operator is approved, false if not
    */
    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).
        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see ""Approval"" section of the standard).
        @param _from    Source address
        @param _to      Target address
        @param _id      ID of the token type
        @param _value   Transfer amount
        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`
    */
    /// @notice postcondition _to != address(0)
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).
        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see ""Approval"" section of the standard).
        @param _from    Source address
        @param _to      Target address
        @param _ids     IDs of each token type (order and length must match _values array)
        @param _values  Transfer amounts per token type (order and length must match _ids array)
        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`
    */
    /// @notice postcondition _to != address(0)
    /// @notice postcondition _ids.length == _values.length
    /// @notice postcondition forall (uint i) (_ids.length == _values.length) || (i >= _ids.length) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])
    /// @notice postcondition forall (uint i) (_ids.length == _values.length) || (i >= _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;
}
","[""Interaction: 2\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:95:5: Postcondition 'forall (uint i) _balances[_ids[i]][_owners[i]] == batchBalances[i]' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: OK\nERC1155::safeBatchTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:178:5: Postcondition 'forall (uint i) _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]' might not hold at end of function.\nERC1155::[receive_ether_selfdestruct]: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 20 warnings.\nErrors were found by the verifier.\n\n""]"
2,275.5381042957306,10,False,,"[""Interaction: 8\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:95:5: Postcondition 'forall (uint i) _balances[_ids[i]][_owners[i]] == batchBalances[i]' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: OK\nERC1155::safeBatchTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:177:5: Postcondition 'forall (uint i) _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]' might not hold at end of function.\nERC1155::[receive_ether_selfdestruct]: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 20 warnings.\nErrors were found by the verifier.\n\n""]"
3,347.7399055957794,10,False,,[]
4,285.5639204978943,10,False,,[]
5,313.8637602329254,10,False,,[]
6,67.87044072151184,1,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
        @notice Get the balance of an account's tokens.
        @dev Returns the balance of the owner for a specific token ID
        @param _owner  The address of the token holder
        @param _id     ID of the token
        @return        The _owner's balance of the token type requested
    */
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance) {
        // postcondition: The returned balance matches the value stored in _balances for the given owner and id
        return _balances[_id][_owner];
    }

    /**
        @notice Get the balance of multiple account/token pairs
        @dev Returns a list of balances for corresponding owner/token pairs
        @param _owners The addresses of the token holders
        @param _ids    ID of the tokens
        @return        The balance of the token types requested for each (owner, id) pair
    */
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances) {
        // postcondition: Each element in the returned list corresponds to the balances of owners and ids at the same index
        require(_owners.length == _ids.length, ""ERC1155: owners and ids length mismatch"");

        batchBalances = new uint256[](_owners.length);
        for (uint256 i = 0; i < _owners.length; ++i) {
            batchBalances[i] = _balances[_ids[i]][_owners[i]];
        }
        return batchBalances;
    }

    /**
        @notice Enable or disable approval for a third party (""operator"") to manage all of the caller's tokens.
        @dev Emit the ApprovalForAll event on success
        @param _operator  Address to add to the set of authorized operators
        @param _approved  True if the operator is approved, false to revoke approval
    */
    function setApprovalForAll(address _operator, bool _approved) public {
        // postcondition: The mapping _operatorApprovals reflects the new approved status for the operator
        _operatorApprovals[msg.sender][_operator] = _approved;
        emit ApprovalForAll(msg.sender, _operator, _approved);
    }

    /**
        @notice Queries the approval status of an operator for a given owner.
        @dev Returns whether the operator is approved to manage the owner's tokens
        @param _owner     The owner of the tokens
        @param _operator  Address of authorized operator
        @return           True if the operator is approved, false if not
    */
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved) {
        // postcondition: The returned status matches the approval status in _operatorApprovals
        return _operatorApprovals[_owner][_operator];
    }

    /**
        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).
        @dev Transfers the specific amount, adjusting balances and performing checks
        @param _from    Source address
        @param _to      Target address
        @param _id      ID of the token type
        @param _value   Transfer amount
        @param _data    Additional data, must be sent unaltered
    */
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public {
        // postcondition: Balances are updated correctly for the transfer
        // postcondition: Emits a TransferSingle event
        require(_to != address(0), ""ERC1155: transfer to the zero address"");
        require(_balances[_id][_from] >= _value, ""ERC1155: insufficient balance"");

        _balances[_id][_from] -= _value;
        _balances[_id][_to] += _value;

        emit TransferSingle(msg.sender, _from, _to, _id, _value);

        // Additional logic for smart contract check and ERC1155Receiver call can be implemented here
    }

    /**
        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).
        @dev Transfers multiple token ID amounts, performing checks and updating balances
        @param _from    Source address
        @param _to      Target address
        @param _ids     IDs of each token type
        @param _values  Transfer amounts per token type
        @param _data    Additional data, must be sent unaltered
    */
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public {
        // postcondition: Balances are updated correctly for each transfer in the batch
        // postcondition: Emits a TransferBatch event
        require(_ids.length == _values.length, ""ERC1155: ids and values length mismatch"");
        require(_to != address(0), ""ERC1155: transfer to the zero address"");

        for (uint256 i = 0; i < _ids.length; ++i) {
            uint256 id = _ids[i];
            uint256 value = _values[i];

            require(_balances[id][_from] >= value, ""ERC1155: insufficient balance"");

            _balances[id][_from] -= value;
            _balances[id][_to] += value;
        }

        emit TransferBatch(msg.sender, _from, _to, _ids, _values);

        // Additional logic for smart contract check and ERC1155Receiver calls can be implemented here
    }
}
",[]
7,264.76758551597595,10,False,,[]
8,318.4044933319092,10,False,,[]
9,277.7151725292206,10,False,,[]
10,285.95968985557556,10,False,,[]
