run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,412.0017011165619,20,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (batchBalances[x] == _balances[_ids[x]][_owners[x]])
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == msg.sender) || ( _owners[i] != msg.sender )
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || !(msg.sender == _operator)
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from]
    /// @notice postcondition forall (uint x) _from != _to || _balances[_id][__verifier_old_address(_from)] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || (__verifier_old_uint(_balances[y][_from]) == _balances[y][_from]) || (_from == _to)
    /// @notice postcondition __verifier_old_address(_from) != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_tSvMVOW8LMhhSfj59AJnCPPX', 'thread_Vab6b54Ognc7x2Ma7OaqamcT', 'thread_FcyQhQm6n3v5WBXg6rLkp6aE', 'thread_j0xmziv1djSFmkjdqe6M14PN', 'thread_A4UwtumTIVcgMyTQzSG3oSx8', 'thread_ofrPBYqp0G3xdWRMUzvp6c8m']"
2,397.07594060897827,25,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _operatorApprovals[msg.sender][_operator] || _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_a6u2W5dIvzIUtycw0XbaANld', 'thread_q1LZr4IlN53Q75Ovi8TeuNtG', 'thread_oNVtFt74W857c89OuT5kCr5u', 'thread_PLG9hw7FTGWqc9CQ42dGp0jp', 'thread_Ij1QzqOpXNZCwJnuVTES104o', 'thread_0T88BbK74l82y0sCHWNOnYWD']"
3,448.65489315986633,26,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to]
    /// @notice postcondition _from != _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_diYxfVCEJuAcjGk208s4Y9WT', 'thread_kHJxFnXlkNSTOsacEpBzmEi0', 'thread_d6zeCcFHJ1ljj2YpD2M1rmpO', 'thread_YS6OS1jEYwO45Dn68jfm8Vks', 'thread_ODDUDMRxrsSo4JhZlNxgHfZg', 'thread_YAHd8sgegbxzEQzRnQd5k4qv']"
4,404.54113006591797,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _from || __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to]
    /// @notice postcondition _from != _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint k) _from == _to || _balances[_ids[k]][__verifier_old_address(_from)] == _balances[_ids[k]][_from]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] == _balances[_ids[j]][_from])
    /// @notice postcondition forall (uint h)  _balances[_ids[h]][_to] == __verifier_old_uint(_balances[_ids[h]][_to]) || _from != _to
    /// @notice postcondition forall (uint m) !(0 <= m && m < _ids.length) || (_from == _to) || (_balances[_ids[m]][_to] == __verifier_old_uint(_balances[_ids[m]][_to]) + _values[m])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_pHmMOJTEXkzk8gTcUbzbKBqS', 'thread_LMr6Hp737c4oiaTJ7eKfWFk5', 'thread_2XV2MAduKWe6P5uMKVHqVr0T', 'thread_eUYPW288ewC1mNRvgPBin8yT', 'thread_tO8gBDWeZaOEQGhNrY2tPeAX', 'thread_LkY5cIRzScP4RwxcD9Ejn4kX']"
5,583.8177173137665,30,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address op) !(op == msg.sender) || _operatorApprovals[msg.sender][op] == __verifier_old_bool(_operatorApprovals[msg.sender][op])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_K5TNfHcuBWqLt39x1V3gEUpA', 'thread_hIZzxn94VmJGiXZ5n1ZXjJEf', 'thread_VKCxKXxVfMaJBm50OqQx9plL', 'thread_qeEUPzpQ1WiHOtIw3q0PgGSb', 'thread_KMIGsqpOZ36TGsEsSmG5nzRU', 'thread_rIDvMzNLnES6PbzSaGF8rKLV']"
6,329.11389899253845,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _from || __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to]
    /// @notice postcondition _from != _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_uR9uMcbLUOyPxUUh6LUReamO', 'thread_FfRy1iMY1HXh5a275OdPlRTb', 'thread_9yhlUUmrFVvBDKKwKoGWnfBy', 'thread_0DnytEQ1sVKFvgF8NXO0cFxO', 'thread_MQDoKytVFzj1f5tYfzlIRVoJ', 'thread_QMJEdbC9Bok1vyXLkYOf1GsH']"
7,814.9087839126587,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || _from == _to
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from] || _from != _to
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_nbtK8KwE53YPN0zoxxbDEgqj', 'thread_orkNVDvHH0RgSBZkxCbwTDXH', 'thread_0NxcFOs9W9kQ5m5uZ7B2ChTp', 'thread_k6SNJkPPIiJhvkOSDTyEk6A0', 'thread_WnJVILWriWcK6z9NWIJE1ydW', 'thread_dY6I7xe9um4z1FudSqx6jFgc']"
8,505.76704502105713,24,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || !(msg.sender == _operator)
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_Q9WZaNYVMhekEzaxQDLLQHgD', 'thread_AkSTFpBEJO1YTvudjvX6nhM5', 'thread_zLKDldZlhOqowNRM40ZQIs9d', 'thread_NuBKs2QD1Nafly1rzk7vHyfP', 'thread_xuejLVdptiam52YJqExa0E86', 'thread_Bv4Ea1YefOCurKJ2rjVHQOQp']"
9,788.2729675769806,18,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _operatorApprovals[msg.sender][_operator] || _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _from == __verifier_old_address(_from)
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from]
    /// @notice postcondition forall (uint x) _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition forall (uint x) !(0 <= x && x < 100) || (_from == _to) || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value)
    /// @notice postcondition forall (uint x) (_from == _to) || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value) || !(0 <= x && x < 100)
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to] || _from != _to
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) >= _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_U2aGl2oJjzwDXXmsiz3dcs9w', 'thread_AFekylVkbXbTxczRIjAarfrt', 'thread_XXt9gqAwV0eCswEeXUV18Tsa', 'thread_aY4ghQ5XuPyOps59IOJiue6p', 'thread_4s6SYkEGzm65w2Y1gSEBf9v2', 'thread_iVj7pYU2QvnJtKqB3MeL6DWf']"
10,364.644651889801,19,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint j) batchBalances[j] == _balances[_ids[j]][_owners[j]] || !(0 <= j && j < batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _approved || _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_S7BhisYZ4G11xLiJqiPJ5Q7x', 'thread_6Q5TYDnkCah3mWNCqlfkr9Zy', 'thread_zPyAqJ039giDIIV7KY7G5HnH', 'thread_Fb1WKUbARf4BUb0LiuNqep8e', 'thread_D94r9oMsHo2EQezipoEJGlnZ', 'thread_TkPcBp76h8Dt7ozAP7hhxdqS']"
