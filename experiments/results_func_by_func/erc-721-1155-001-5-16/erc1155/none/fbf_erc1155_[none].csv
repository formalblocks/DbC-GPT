run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,353.59706115722656,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _approved == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_RvUIancnKgCOsHyMoBQrgFg6', 'thread_hTnN1wVJUQ1cRNJi1ccp7FrM', 'thread_Ve4dllXtsmug5t6cMc1qxFyA', 'thread_KyRstmEitKfC7UtfJD6y5cgz', 'thread_oDLfK5YXEiaBWqs8V8HdrFxU', 'thread_YjqiViGMDApSFVQvbYATlzT9']"
2,708.2737243175507,40,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition true
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == _operatorApprovals[addr][_operator] || _approved != __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]) || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_to == _from) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j])
    /// @notice postcondition forall (uint h) !(0 <= h && h < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[h]][_from]) >= _values[h])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Failed', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_2p56gJxtRwFEB4Kl2dm6rgfq', 'thread_DD8xt1nnczZFo1oQca5Gb6iY', 'thread_iajSws26NDXQcBaiXlsdSDyl', 'thread_COBX1BpC4NcjSulKShVIPgcF', 'thread_FAQYAcwb0N9kbDy2H6pltWDB', 'thread_dfRDz2eDQ64JDLPYrTlh4a17']"
3,289.42483401298523,16,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint x) 0 <= x && x < batchBalances.length || !(0 <= x && x < _ids.length)  || batchBalances[x] == _balances[_ids[x]][_owners[x]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator]
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _approved != __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) >= _value
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _from == _to
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint h) !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h]) || (_from == _to)
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_pwsjsvlsyHbkkB2NiJVN6z0b', 'thread_7J4RRn8dYKgHUMcmwbK4TFO2', 'thread_Doy27uESzszTyj9brjl9cLRT', 'thread_nSPgrmHeBazl2TOREpVkOByn', 'thread_QnbuulPDrBrtNM3jM4XEKgnC', 'thread_XwwU6PCYcrAafRMia0BWVt4z']"
4,289.6738610267639,16,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint x) !(0 <= x && x < batchBalances.length) || (batchBalances[x] == _balances[_ids[x]][_owners[x]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) addr == msg.sender || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition _from != _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from] || _from == _to
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || (_from == _to) || (__verifier_old_uint(_balances[_id][ _from]) == _balances[_id][_from] + _value)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (__verifier_old_uint(_balances[_ids[k]][_from]) == _balances[_ids[k]][_from] + _values[k])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_Z7aBCUON1c0fDREZzrU3fdNS', 'thread_s2uOuzmnwK2Nvhkv97SW2j7O', 'thread_81yqBEbi9MKTYRqyPG5voVVD', 'thread_FzjcVwc1jonzFKiClrYRHy05', 'thread_pGV2zaOb95g3dmox2LbSTDct', 'thread_hEjhhhXBaFIqlng1ZvEiq4Ti']"
5,502.19025921821594,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition  forall (uint x) !(0 <= x && x < _id) || __verifier_old_uint(_balances[x][_owner]) ==  _balances[x][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint j) !(0 <= j && j < batchBalances.length) || (batchBalances[j] == _balances[_ids[j]][_owners[j]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _approved == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition _from != _to || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from])
    /// @notice postcondition (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value) || (_from == _to)
    /// @notice postcondition forall (uint x) _from != _to || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition forall (uint z) _from == _to || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from]) || ( _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value)
    /// @notice postcondition forall (uint y) !(0 <= y && y < _data.length) || (_to != address(0))
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_f3wLEDin7amXodAlZqUfwfar', 'thread_4WEqDnhT9sHgoGuQGOCwrCzf', 'thread_fIFH8e7YaNNzzHLcuNsHVPS5', 'thread_vmtKf4wBEQD0s98i1ZpIqrVW', 'thread_poh7XJ4eMVy4JhXO1UmLDsLu', 'thread_bMuHKbkxgqklu4B8y7yxUBMM']"
6,181.569885969162,10,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_balances[x][_owner] == __verifier_old_uint(_balances[x][_owner]))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _approved == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != _from || __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from]
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition  _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    /// @notice postcondition  forall (uint x) !(0 <= x && x < _id) || ( _value <= __verifier_old_uint(_balances[_id][_from]) )
    /// @notice postcondition  _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != _from
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from == _to) || ( _balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j])
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from != _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]))
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_id0YoOwM7DC4vcEtqzpGoKbF', 'thread_Rt8We8y2Brjj5uw31gxUJNjQ', 'thread_YMlKEmlKwDioNqpWKrt6vYcI', 'thread_Q5etV625dM9qrspz7mmwBQAk', 'thread_M7KwUP2bXHErJwbJLQgdriRs', 'thread_QR8rS8icqTw2ibnnmcZZ0YE1']"
7,438.17900252342224,23,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || ( _owners[j] == _owners[j] )
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition msg.sender == _from || _operatorApprovals[_from][msg.sender]
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_jJ68KgObYbsELNc0z6jvInw2', 'thread_NZTDsnYITMckuRpwGNFjhY3V', 'thread_sBjoyV2TXpP1T7UdaKF6wclu', 'thread_XfUct8LzDqzLtu8SVHWdPvlr', 'thread_E9Qss3rqUztrLEFXj9g7EMLx', 'thread_dqNnRQ9bontBNfoSftuRJWwS']"
8,316.32539534568787,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_owner == _owner)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x]) || (_from == _to)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_Ns4LGk6oGzQkiTCy12djmDMk', 'thread_fwRd78E2E0qiiw6i6SvzOUST', 'thread_nXqN1KuqEyk8eXs8txanIaRF', 'thread_CX5MNRSrHQ84EVRmgOHpDbMV', 'thread_OJT4L9RtAq81L3CMLdAqWHnb', 'thread_knG4npeZM8oRdaMjRd7lj61A']"
9,285.08517265319824,15,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from])
    /// @notice postcondition _from == _to || (__verifier_old_uint(_balances[_id][_from]) - _value) == _balances[_id][_from]
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) + _value == _balances[_id][_to] || _from == _to
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from] || _from != _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != _from
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k]) || (_from == _to)
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_mMGfb6PQQUaTRvz4qs5QlYxk', 'thread_D3ZKpXGzrUOKNhBwc3VjtsWU', 'thread_lsxcI1mCyW3wudkJlecF2xdq', 'thread_US84wNNNTDfRCGPjFPa7uBt7', 'thread_G2a3m5xcPck9EyX9Zv3n30XR', 'thread_gOnRRZnL4SjKL6xVxHyIKFWO']"
10,339.66555619239807,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || __verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _approved == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != _from
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]))
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || ( _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k] || _from == _to)
    /// @notice postcondition _values.length == _ids.length
    /// @notice postcondition address(0) != _to
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_tv3e4NFdjFjr7yZxzdCZjgGj', 'thread_9sMdBccLgq1PqPTEtq3PVHMO', 'thread_aXVVeWuPHqPwB613NOhhVMO9', 'thread_IBmCq9Gq1IKsdZkvhHHfC1fJ', 'thread_zXnATm9Cl4GaCHKjDuB5WI2E', 'thread_PBs6wbj4TcdMa8oW8hygGlvJ']"
