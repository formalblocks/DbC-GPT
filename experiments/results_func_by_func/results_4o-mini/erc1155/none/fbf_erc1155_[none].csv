run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,1144.6332259178162,42,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_g1oszOORxDma0C2UxoIHm9ax', 'thread_cgXLLXb9w0Nyth7hdsn0Hyit', 'thread_JDNmXf2qxwJxglOHkTsDI3EW', 'thread_Krwh3sKH4atkX5t2GsdoERaD', 'thread_tLhzk8RDRKjnfb0cfiCVJSRO', 'thread_BNm6sW9mGYVSaMKMUCYd8mDW']"
2,706.044472694397,26,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) !(operator != _operator) || _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !( _to == address(0) ) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition !( _to == address(0) ) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    /// @notice postcondition !(_to == address(0)) || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value)
    /// @notice postcondition !(_to == address(0)) || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_W3NqxUe4730ZJQ8WfbjACnxv', 'thread_h9a1ALkP8YymTIovUIdH5zhI', 'thread_mdWFpP8HzgfcR53XLDm0CrfI', 'thread_w6nmYGxNRDkD0B9Eob7uUPwy', 'thread_tXUoDybogjclzIf7JHoTFbmZ', 'thread_bC5OhDzMI8PTjivu8GRviHQp']"
3,1034.119250535965,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_aSRPLj2BTooJCZMETPvXiHiO', 'thread_8PoeAfBl251Cc5WJCDpb53Oc', 'thread_rX3w8uBrNItDN03ihqNmAYwx', 'thread_VGucKPkAmTgWVNMqZ1eKcY1L', 'thread_UZecz4W6Ij22NuT86wjxbhw1', 'thread_t4dsH6Pza3O8ZHXtbqwE4HNX']"
4,925.5704469680786,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_Q8IKfaYrrc3VUbjlWZc4UoH8', 'thread_P6zN0z78Llxxj8noKhpuYT9N', 'thread_eV8OfQuqjt3S9VZL7WEaTEnp', 'thread_s10F1FuRV1RlqdKlSxyZolrn', 'thread_x0RrBmOfIHo0gsHmSSjfby0J', 'thread_tGMwbQtNTImCFcPzEyIdYbN9']"
5,615.5029380321503,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition !(0 < _value && __verifier_old_uint(_balances[_id][_from]) < _value) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition !(0 < _value && __verifier_old_uint(_balances[_id][_from]) < _value) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_qqv2xje9519ca3AZmwwH86Wr', 'thread_lDCrO1dkoKqOKtrYvzgnSY8d', 'thread_lDQFrAOOTa9IzlSRrJwHJYvk', 'thread_M8BypFbyKlu1TnGczv2fM1SV', 'thread_njZynZcJ5EZS2blgN0avFO2v', 'thread_JvxcWnZO6BuPzel8nhH0ATTo']"
6,929.3679497241974,33,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) !(operator != _operator) || _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_8opjGl1VxP0sTPpWLPargHIp', 'thread_PFMi1Ksih9gxgMTVDS7DGUUA', 'thread_U3nNSYkrFCTj8imvaLeaHhkf', 'thread_84tu5BfaY3XOvW1pmiKpViqi', 'thread_DFAE6HupZ0VI2nEQrYMI453Z', 'thread_0lSGm478m5GjOISMSFn8wkiC']"
7,612.1849391460419,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !(address(0) == _to || __verifier_old_uint(_balances[_id][_from]) < _value) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition !(address(0) == _to || __verifier_old_uint(_balances[_id][_from]) < _value) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_GqgnKKH82487v5gjogBTZw4c', 'thread_gAXirh9WKC834FT9u2rEGVps', 'thread_Y0UZ6e7Qfu8USZsQXXxZePq5', 'thread_T745dGhb3BMYgf0XvAFUMCQX', 'thread_gDY4N8vDOekN6ln7RcxzS5Ly', 'thread_ufy7orn4NkmjIjIyyBJJcQoA']"
8,666.0100612640381,26,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !(msg.sender == _from && _to == address(0)) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition !(msg.sender == _from && _to == address(0)) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_q1CjQ0O1pgJkLvD8otKJX6dj', 'thread_J4AiHtJQVnDiltVfCmysRIdf', 'thread_MjUoS146AnMVq0l2afBkUFMe', 'thread_rSSn3GWsMTfcJTIy1Rvctup2', 'thread_e7PFBg39jCdfcX3T0o4oPG5V', 'thread_KIUBDHux5CHD6MjT55LgVcec']"
9,912.1879343986511,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_UWSjx72kSS7SF7YiLD5lDN2m', 'thread_JeTZ4ru317Cog9kiI1dJyghS', 'thread_3uUoaflTm7j0Xn6DSC6IZOU4', 'thread_vyOqJlOrXHuicpQGHa6LUsGm', 'thread_cOfOkni7DVxFxCWiuCIk0RfS', 'thread_tAO9CAGi5JQ7eJDkdBSAcWt4']"
10,875.9416344165802,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address operator) _operatorApprovals[_owner][operator] == __verifier_old_bool(_operatorApprovals[_owner][operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_hsG2s1nZnqAXJlE37jKVBVxR', 'thread_KUArCUEawHbr7DqgvVirG213', 'thread_zHUtih9PFRBGXaW1H3SpEF7t', 'thread_yZgRWiBvWtuDwuPcxpVmEm4D', 'thread_KuuAlIQFedWTooCp30vVv2Vw', 'thread_476SdyATLWvjNgrt1uwfBQWh']"
