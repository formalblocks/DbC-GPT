run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,207.72056674957275,11,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _from == _to
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to] || _from != _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || ( __verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_yahYv57SMEiqmveqLxUFWRHR', 'thread_uHYj0sszPag6mFXL0WjIhyrO', 'thread_Scl9C0fVuq2UfKZpQYPV7cAr', 'thread_6mwcvMjGo80ifuMHaagX6eBY', 'thread_gw9z6hgK2ZkOLBkcET0uOcfc', 'thread_W3xFqsvfYor8tLlbd52ywn52']"
2,317.2862627506256,22,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint x) !(0 <= x && x < batchBalances.length) || (batchBalances[x] == _balances[_ids[x]][_owners[x]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition true
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) >= _value
    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _from == _to
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_from == _to) || ( _balances[x][_from] == __verifier_old_uint(_balances[x][_from]))
    /// @notice postcondition forall (uint d) _from != _to || _balances[d][_from] == __verifier_old_uint(_balances[d][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint x) _from == _to || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x] && _balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x]) || !(0 <= x && x < _ids.length)
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint x) _from != _to || _balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Failed', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_j75dcyCztqDU1iO2z9X6ixmo', 'thread_O3CHZQmJlqjAMqUQghEE8cp5', 'thread_66FiRoniLirHAbRKRzmApffi', 'thread_4KOC3UoVax90u941Rpb16xg3', 'thread_j5pDgNMTpIkZZ3sLIZS22L8M', 'thread_Z39HIarYlWR5fG85wb7mKfYT']"
3,376.5009617805481,18,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < 2**256 - 1) || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != _from || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    /// @notice postcondition _to == _from || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to])
    /// @notice postcondition forall (address account) _from != account || (_balances[_id][account] == __verifier_old_uint(_balances[_id][account]) - _value) || (_value <= __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _to != _from || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_5taqeF9NXboprtoBnLb88Hmi', 'thread_qhoT4gajNtsB5xUu52bLC4SY', 'thread_Mbrzrokaoiux0xv142aHe0O8', 'thread_j9IyHgNtiKlaNLun6xkhUQT7', 'thread_VsTOdf4f2C4yHHZjqPSBx5xb', 'thread_0DcyQAPl2O4LPtXkZr9nJTkL']"
4,345.2361116409302,18,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition _from != _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint h) !(0 <= h && h < _ids.length) || (_values[h] <= __verifier_old_uint(_balances[_ids[h]][_from]))
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_ADFt36pCtyED1OURmKNBSaUm', 'thread_gHKIvFre9tZCHCtZ70Dsp61t', 'thread_4211tSGcVGaShTxihNDqA4cj', 'thread_DsYzCurxYY1Rbqg0HzItiWra', 'thread_G1ArfJt6hEtyOG2N3dbazMYC', 'thread_cREQtuxnT6A1gN7fokl3eYqK']"
5,529.9216089248657,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) addr == msg.sender || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _ids.length == _values.length
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from != _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) == _balances[_ids[x]][_from])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_qQXLyAtLwz8KjsPdbfKhFQY7', 'thread_3qK3M15f1Ug6H1nsQReLcMP3', 'thread_NGEdfooQkSS6QHDVg44St9i5', 'thread_RA5QRt8Csy9kgfgNANWifWXv', 'thread_HijNfskOOLWcR3rSIrPLn3KH', 'thread_hZFglfzIruRttWy2wYco2Qt0']"
6,335.1860580444336,20,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) msg.sender == addr || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || (__verifier_old_uint(_balances[_id][_from]) == _balances[_id][_from])
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from] || _from == _to
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to] || _from != _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_fDrmDg7R2EUuftCwgWAZeele', 'thread_cvGL7kZcce6iHrc6pm6YOzLk', 'thread_ipmyq700yYReVZlPCU4M57Xd', 'thread_m4RlG8Ck09Pmuk3N0xjtKHsQ', 'thread_IBM5vCy33N4EcmWT4oOuXcYf', 'thread_nniujDJmYZDhQx75N4Nxdo4K']"
7,333.94098138809204,18,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < 10000) || __verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint x) _from == _to || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x] && _balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x]) || !(0 <= x && x < _ids.length)
    /// @notice postcondition forall (uint y) !(0 <= y && y < _ids.length) || (_from == _to) || ( _balances[_ids[y]][_to] == __verifier_old_uint(_balances[_ids[y]][_to]) + _values[y])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_0kc6SoLuAmwjuLeNJJwH7B93', 'thread_8PujmxZ20AXKreTZEz2OgxSD', 'thread_x7jAKfudupcesUllxKz2gQyp', 'thread_cPb5pMrYybeF4mt1hkzdmxab', 'thread_o95gfwsA1ekBKU0PFV7XT89I', 'thread_dHEQ44wokINLEEX98lBPYtPe']"
8,338.27118468284607,17,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0)
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || __verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != _from
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]))
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_balances[_ids[j]][_from] >= __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] || _from == _to)
    /// @notice postcondition forall (uint h) !(0 <= h && h < _ids.length) || (_from == _to) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h])
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_LGBYoqrxqZYzS3L2oma85fmH', 'thread_IQbF7osDLhAXsRU8oz9IQy7y', 'thread_M4mLO7eC9pNONCpc0iRQobSv', 'thread_zS0JGjQxXEeJO4YBrvw3Mxk7', 'thread_D1NyuBBSDbTeqpB0YyzJ5A6u', 'thread_UNi6pJ8uoRZpr5Lm8a2tYoPE']"
9,522.9863195419312,31,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_owner == _owner)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) addr == msg.sender || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_yB8II9VMJaQzfeVbpusmFWQd', 'thread_L2GYw1lGwO4mcSkXiMq8v5wI', 'thread_R4KvmXLcoVlzIJWuKw4cDDUP', 'thread_KNbvnoqntee2MTfdIxigglCr', 'thread_0tfT6zvxPie6yFTpvWe3X2wf', 'thread_TV20MJ7XyYpaSsnnuB4XOm4h']"
10,207.01655793190002,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition true
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || (_from == _to && __verifier_old_uint(_balances[_id][_from]) == _value)
    /// @notice postcondition __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from] || _from == _to
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]))
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (_balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k])
    /// @notice postcondition _values.length == _ids.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Failed', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_sEy6bCpjySyZqqJsOrTe2fst', 'thread_GPpCBE31fhiN3LvJpJHjiDNj', 'thread_cI1AMR5hXphsauYCnufMJHxi', 'thread_0qScLHjFLZJrpR3agUaMGPAp', 'thread_nk1fHPqdVBl48WGnxHyeUta0', 'thread_t1qGmKkIrXjlAF2HzfWrc46n']"
