run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,788.8939065933228,22,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address account) !(account == _owner) || balance == __verifier_old_uint(_balances[_id][account])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || _owners[i] == address(0) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_to] == __verifier_old_uint(_balances[_ids[h]][_to]) + _values[h]))
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (_from == _to) || ( _balances[_ids[a]][_from] == __verifier_old_uint(_balances[_ids[a]][_from]) - _values[a])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_APrtDc0Oq9sUiARbm4YRorCN', 'thread_LF6KyV8WvbJ0omZftG6pHAob', 'thread_mJP2BnXVx3wynCvhz7e5i8BW', 'thread_CQAhTP4bdvx7cgIMStdOKrG0', 'thread_wyYPhpMFUUavisKYuVKJuAnu', 'thread_2PdoFon67WlGCp9DeeYR54M3']"
2,632.6485850811005,20,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address addr) _owner != addr || balance == __verifier_old_uint(_balances[_id][addr])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _approved == __verifier_old_bool(_approved) || _operatorApprovals[__verifier_old_address(msg.sender)][_operator] != _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h]))
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_to != _from) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (__verifier_old_uint(_balances[_ids[a]][_from]) >= _values[a])
    /// @notice postcondition _to != address(0)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_oWqjj2fEyDthGETLFho3g2KK', 'thread_4Vj4xskXRzz54dFxa3gUjZ75', 'thread_CKkSZIWMmFCXBbRexBDtRztZ', 'thread_geaKA3VpLUbsJoVlU7gqN1sR', 'thread_7uGZ1b7i0PchaCIFTCZcsBML', 'thread_CceJSVPNomOm0Ql4sl4XPlrI']"
3,1863.877286195755,52,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address account) !(0 <= _id) || balance == __verifier_old_uint(_balances[_id][account])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition true
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Failed', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_SOt6CftCqoGG19gI2rHsWlcB', 'thread_aE2a6GS87wFptR6CEWRZ5Fii', 'thread_ZonUOk5mlxJxNsZ4eZN0V1My', 'thread_BH42OkuPGNK7oN1LeiJcC5Xu', 'thread_Xd4xll61vA033pv8Dd2MjDci', 'thread_kUKSfmSx8JUoqMljFgxNlnYI']"
4,835.6684474945068,33,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition _owner != address(0) || balance == 0
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[__verifier_old_address(msg.sender)][_operator] == _operatorApprovals[msg.sender][_operator] || _approved != __verifier_old_bool(_operatorApprovals[__verifier_old_address(msg.sender)][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != _from
    /// @notice postcondition forall (address account) _operatorApprovals[account] || (__verifier_old_uint(_balances[_id][_from]) >= _value)
    /// @notice postcondition forall (address account) _from == account || _operatorApprovals[account] || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value)
    /// @notice postcondition _from == _to || forall (address account) (_operatorApprovals[account] || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value))
    /// @notice postcondition _value == __verifier_old_uint(_balances[_id][_from]) || _from == _to || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value)
    /// @notice postcondition forall (address account) _to != account || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_EnR6AzBQu0cPOWjn5SHAeCJR', 'thread_HxPipsows9ryBFRIKg35nbQ0', 'thread_eZAFyqbVCapg2g8ftplcu1vm', 'thread_20mlItHKPTAZ2oaXK8z8vNSP', 'thread_TZ95twLYnpQhlLQhhlrIyVLH', 'thread_IXpoksQENhlAGHKZhmgRPcHH']"
5,870.6621673107147,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _balances[_id][_owner] == balance
    /// @notice postcondition forall (address account) !(account == _owner) || balance == __verifier_old_uint(balance)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition !(_operator == msg.sender) || _operatorApprovals[msg.sender][_operator] != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_noBP1fZsaJrVBxMnEmbw2NWO', 'thread_BTTNTYDbezTRIG4bdcmZ8XDA', 'thread_txHmUvnwmJ0AeoMS9TGkEjWA', 'thread_OdU29YrS0mXnuEy3dNZgDZMK', 'thread_W1WweobDQgGQQzpdzBRbHLIa', 'thread_YXT8cbbvwCJeB7DtJ4180Bch']"
6,355.0457091331482,19,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner] || (__verifier_old_uint(balance) == _balances[_id][_owner] && _owner != _owner)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || (batchBalances[i] == _balances[_ids[i]][_owners[i]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || !( _approved == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]))
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_to] == __verifier_old_uint(_balances[_ids[h]][_to]) + _values[h]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from != _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) == _balances[_ids[x]][_from])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (_values[a] <= __verifier_old_uint(_balances[_ids[a]][_from]))
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_m4pTLpI6mfh0DxHVc1nJlBWW', 'thread_y6d0KYysAqXIDL5VlCHczyrw', 'thread_mkDz4yo3XKjYQyeU8EFJAkg6', 'thread_3MhQ1OfB1Fygc7zrM80SRE7I', 'thread_uKtdLOkC8DZwPxFZiyVmx3ga', 'thread_D2doDjST61nmLg6JdlrEj2GT']"
7,526.3469974994659,28,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition true
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) || _approved != __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h]) )
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_to != _from) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || ( _balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (_balances[_ids[a]][_from] == __verifier_old_uint(_balances[_ids[a]][_from])) || (_from != _to)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Failed', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_3n2W2aMqcXWL93Dvwh2hqPeW', 'thread_vKGT1lziQhSaNaV5lYsMR66f', 'thread_4iobG7XmydqQixS0KGY8lzlB', 'thread_vmKymoJboRPXlXEzDc0BrbrO', 'thread_aSLSBeVd75HqHUT7xh3JqBBb', 'thread_Z8qFTqMY890PdsJAwgPoGqND']"
8,487.0084991455078,19,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address addr) !(addr == _owner) || balance == __verifier_old_uint(_balances[_id][addr])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint h) !(0 <= h && h < _owners.length) || (batchBalances[h] == _balances[_ids[h]][_owners[h]])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (batchBalances[j] == _balances[_ids[j]][_owners[j]])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[__verifier_old_address(msg.sender)][_operator] == _operatorApprovals[msg.sender][_operator] || _approved != __verifier_old_bool(_operatorApprovals[__verifier_old_address(msg.sender)][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition true
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h]))
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_to != _from) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || ( _balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (__verifier_old_uint(_balances[_ids[a]][_from]) >= _values[a])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Failed', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_3oGWJUNO3e2J8amIEQFJ1vfY', 'thread_jLpyJTTjeV0a6c7hMjiAfprK', 'thread_7bzD32Hi70YyhJBiBrfBAcsn', 'thread_iXLea2daCONKaeJh3Z8vGRUV', 'thread_n8Ipc3YbGu8GpYOGOs3Duyh4', 'thread_ZjcMvCPfjddpXVGLQPODAhu1']"
9,474.0092918872833,20,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address account) true || _owner == account || balance == __verifier_old_uint(_balances[_id][account])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition batchBalances.length == _owners.length
    /// @notice postcondition batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) != _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_to] == __verifier_old_uint(_balances[_ids[h]][_to]) + _values[h]))
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[x]][_from]) >= _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (_from == _to) || ( _balances[_ids[a]][_from] == __verifier_old_uint(_balances[_ids[a]][_from]) - _values[a])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_5CQ5EH5t4yinORUmn0azBDgS', 'thread_7Iv1ThXmeOyI5BPmjyF6tOyl', 'thread_h13EAyKmRzQRgxTOS1CC0aNg', 'thread_X9KySSXnWpvmgmxfkXQEYYGm', 'thread_0J4nVRoybX70Pdexy4w0nlFf', 'thread_e22pCUv9cvAcGCVbwPx8A8Zw']"
10,554.9075078964233,29,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address addr) _owner != addr || balance == __verifier_old_uint(_balances[_id][addr])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition !(msg.sender == __verifier_old_address(msg.sender)) || _operatorApprovals[__verifier_old_address(msg.sender)][_operator] == _operatorApprovals[msg.sender][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    /// @notice postcondition forall (address addr) _owner != addr || __verifier_old_bool(_operatorApprovals[addr][_operator]) == _operatorApprovals[addr][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint h) ( !(0 <= h && h < _ids.length) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h]) )
    /// @notice postcondition forall (uint j) ( !(0 <= j && j < _ids.length) || (_to != _from) || (_balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to])) )
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || ( _balances[_ids[x]][_to] == __verifier_old_uint(_balances[_ids[x]][_to]) + _values[x])
    /// @notice postcondition forall (uint a) !(0 <= a && a < _ids.length) || (__verifier_old_uint(_balances[_ids[a]][_from]) >= _values[a])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_KfCTWx30G3m6qdgXQ8icBntq', 'thread_qQFJXqoHHx5l977X9Ue2G5Hi', 'thread_kgGNTMiRM0Rv8nV13mII3p8f', 'thread_rd7VIZV7CvLdgtgzxLDSYy6i', 'thread_yIyNywWsYANM36CPv8JJwh2I', 'thread_wjmVZTHPzyDp0osSTosUjnMz']"
