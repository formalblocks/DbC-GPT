run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,605.9591953754425,16,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) !(x == _id) || balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint y) !(0 <= y && y < 10000) || __verifier_old_uint(_balances[y][_owner]) == _balances[y][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition !(msg.sender == _operator)
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_8MNglLZaCtEcNyUrusVLD7rc', 'thread_xgzvVGlXWTNaS0IxEW5ECWMe', 'thread_15Pi5qHM5DcUOFI63pdmM9YS', 'thread_RbdncBlMoy3oj8zbe0gOsoFo', 'thread_N0S33wJafwVVEphC457Q76HL', 'thread_S07tw2yYvNn8aYSMN0hiECWf']"
2,1234.5062475204468,36,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || __verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner]
    /// @notice postcondition _balances[_id][_owner] == balance || !(0 <= _id && _id < _id)
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator != msg.sender || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _approved
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || !( _operator == msg.sender )
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_wpq2DkW6rx0EHEGaTJCrbAbT', 'thread_i5M3uWC7K0ixJHWAxnCdSFS3', 'thread_UjYf1wi7OKKGgF5ri6NK5ZQ1', 'thread_nBmj8uYYWZcB8Wa5WPYlKYWM', 'thread_sCRuGOpkVYysnyNtG6b9ShOu', 'thread_jXcrYaNfk6FCarqwTbfqV3pG']"
3,751.7396562099457,39,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) !(0 <= x && x < 1) || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    /// @notice postcondition forall (address addr) !(addr == _owner) || approved == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_oUnlpghFOdjHVwwJSJSONkHF', 'thread_3vrrNHdti9iN4qra46K0wNwY', 'thread_T5h2yd1zNvHSJ8320ZB5t4ES', 'thread_dPe4yYZAVQu6HliLHI8i4HG0', 'thread_bg3kwlWpzVuxZ3NNSgxlbGmB', 'thread_aahJ2I1ejE48TRX061N6JeLe']"
4,872.3056046962738,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) _id == x || __verifier_old_uint(_balances[x][_owner]) == _balances[x][_owner]
    /// @notice postcondition forall (uint y) !(0 <= y && y < 10000) || balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition _owners.length == batchBalances.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || ( _balances[_ids[i]][_owners[i]] == batchBalances[i] )
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_T4FZDWLc8UlqcsCX4uypFzkQ', 'thread_ObOW6Ban5cePuhKT97uJUqle', 'thread_sq5axZKUjRFsGzMid2jxa19S', 'thread_wC99KXsdItvUbP3zU1ccL58Z', 'thread_hVZ6SreerPIBXu7V6UAWVZnV', 'thread_wCuje8OeiRcPIIDMQxtlTwsI']"
5,950.9953007698059,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition true
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition forall (uint x) _from != _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) || _from == _to
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    /// @notice postcondition _from == _to || (__verifier_old_uint(_balances[_id][_from]) - _value) == _balances[_id][_from]
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Failed', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_scGrEIF2Q7TASaaPXMQHCWWw', 'thread_YonEqecNAjKHInV4ycnWaYTB', 'thread_1HwyzyZkxqqXGjYtmrspqdtz', 'thread_bhwWuchI98WZt1LkVvlPw52G', 'thread_4wHUFeMBN4cwxE139ViVKEiP', 'thread_4RRW0DD1RsUGHg9jjdrmkb09']"
6,600.0646681785583,22,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) _balances[_id][_owner] == __verifier_old_uint(balance) || (0 <= x && x < _id)
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]) || _operatorApprovals[addr][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != _from || __verifier_old_uint(_balances[_id][_to]) == _balances[_id][_to]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || _from == _to || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || (_from != _to) || (__verifier_old_uint(_balances[_id][_to]) + (_from == _to ? 0 : _value) == _balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_IiTGDorM7rzV37YqyQRW0awr', 'thread_VsLfdx3vuTv46i48JeljFHHB', 'thread_912Lyaw26vUEsLpy2bSHpJyd', 'thread_fz9H0hEQgeVqhtUPo23wTyTA', 'thread_PSlEz2ey0oRMt6aZrb6LPWzN', 'thread_oojvyfapjycL9eIiFNsT0Frw']"
7,575.9833443164825,25,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint y) !(0 <= y && y < 10000) || __verifier_old_uint(_balances[y][_owner]) == _balances[y][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint x) !(0 <= x && x < _ids.length) || (_from == _to) || (_balances[_ids[x]][_from] == __verifier_old_uint(_balances[_ids[x]][_from]) - _values[x])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_hL8qRQzzexkBhkQBQpBKuWXY', 'thread_2uPHt5abOpGVcwJbRUyjmIkM', 'thread_u5SR55vvMh0u9V8wrfp49nrA', 'thread_zjtdebV6kDA7MXe4zAGGAyQl', 'thread_WwMPLWBwJp9lgHsRCkoCd0tL', 'thread_i52Khxni2njASjTr5bUh5z55']"
8,444.7884430885315,23,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) _id == x || _balances[_id][_owner] == __verifier_old_uint(balance)
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || _operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _from == _to || __verifier_old_uint(_balances[_id][_from]) - _value == _balances[_id][_from]
    /// @notice postcondition __verifier_old_address(_from) == _from || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition forall (address x) _to != x || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition !( _from == _to ) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _to != _from
    /// @notice postcondition forall (uint i) _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]  || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] || !(0 <= j && j < _ids.length)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_Y0PUMhtQTpbIlSKiSKNZZpV7', 'thread_591yH7FD45D2OvuZluA0yo8C', 'thread_lBHSm3tZ4U6whRr2JOI6nFQw', 'thread_ZG9h162k7yhDbj4tFzSHFIBu', 'thread_F7fZRjcduhAppPSxNoaUQJg9', 'thread_BIWkMeOwdCtOpGWqEoTwBndC']"
9,730.1135985851288,32,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition _owner != address(0) || balance == 0
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || _balances[x][_owner] == __verifier_old_uint(_balances[x][_owner])
    /// @notice postcondition forall (uint y) !(0 <= y && y < _id) || (balance == _balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint256 i) _values[i] <= __verifier_old_uint(_balances[_ids[i]][_from]) || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint256 j) !(0 <= j && j < _ids.length) || (__verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] == _balances[_ids[j]][_from])
    /// @notice postcondition _to != _from
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_RstHSGGe9z3ugHuZC9DiSCtp', 'thread_WkXbUWCI2TZVRrBsZkUaV2pE', 'thread_UpUdu7zohIGqzldV3qsfyK70', 'thread_YbCFzr7omANjpgJPHOyRuChM', 'thread_ANUCkrXB0wWBnpmDGLb13LWM', 'thread_doFy60CIGyxLDo8LtawQG03P']"
10,522.3924612998962,21,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition true
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition forall (uint i) !(0 <= i && i < batchBalances.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _owners.length) || batchBalances.length == _ids.length
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operator != msg.sender || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _approved
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved || !( _operator == msg.sender )
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !(address(this) == _from) || (__verifier_old_uint(_balances[_id][_from]) >= _value) || (_from == _to)
    /// @notice postcondition forall (uint x) _value <= __verifier_old_uint(_balances[_id][_from]) || !(address(this) == _from)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_balances[_ids[k]][_to] == __verifier_old_uint(_balances[_ids[k]][_to]) + _values[k])
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || (_from != _to) || (_balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]))
    /// @notice postcondition forall (uint h) !(0 <= h && h < _ids.length) || (_from == _to) || (_balances[_ids[h]][_from] == __verifier_old_uint(_balances[_ids[h]][_from]) - _values[h])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Failed', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_XTFzzQXQm9xzhtVB657b7jHr', 'thread_isED980ZAoPUi9ITq5Vxn2Tg', 'thread_pXPUnJqQNEhVByjJEBdhhnnC', 'thread_GLJswDAKiYKPqfIK0voBHZG9', 'thread_tQkbBADfy4cFjeP4bO9legYT', 'thread_sPLSBJpzPa2mzRoJsvIUitNJ']"
