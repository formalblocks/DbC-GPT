run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,1022.6523258686066,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition !( __verifier_old_uint(_balances[_id][_from]) < _value ) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition !( __verifier_old_uint(_balances[_id][_from]) < _value ) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_kBuA5DHIICA4fdWlF6jacHQk', 'thread_vLvFAcKHLYhUmeQsQWgwqRlm', 'thread_94sjkssish3gvtxu1ENnLByK', 'thread_6Du3lONWRx5Awcq6dPQhQj12', 'thread_AgCGR1ZymxhSHkroKOVbBPU0', 'thread_msXQ9xfXfob93FBDKfx1Y2se']"
2,1090.707605600357,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_4mr55L76zI4ANnLTJsBBtGp7', 'thread_fz8mbhPUWESick5mkre7kSI1', 'thread_9pe3HCIiAuBp2cUUKkeuNKxx', 'thread_s5pYqbEk6Z0tjk9QD2sFzRg9', 'thread_HfoKZnOiiGB93RbakEcyNabS', 'thread_OTudImGYQHNPtNWmFg0wvaVS']"
3,750.7913830280304,25,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator]) || operator == _operator
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_NEWcoI2sLkO2RJ3JRN9eMgdp', 'thread_eN8Q3Sr5fThuJcTU7RVYJbto', 'thread_yg6ntOxb3joYMe14v5FswhSU', 'thread_tMDv5R0Sma7b3coBYzINFc1A', 'thread_YbrYmWAvEMHhe7bwY6RRRiuE', 'thread_xaONpjCp7wMtcnwxWB6O05Ml']"
4,788.7269594669342,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_d9nqsd8vSu62SOknaSYtEclS', 'thread_Vd8F7QoxyyBb4LekvQghTyjL', 'thread_1vIkJ5Ie5l8DQvfVWtGdTZ0z', 'thread_bPB6Ug6CAO4anWuuKVSxbqxO', 'thread_yrwplPwhUFdwCd9XMC7RK2pR', 'thread_hOKt1MD32vilxntDePknjRRP']"
5,607.8499884605408,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) !(operator != _operator) || _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value) || (_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value) || (_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]))
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_DM4VQz6qUJyU4L69I1ucrTjN', 'thread_WUwgJ5a1iFZEumZDmxMNFmiR', 'thread_LL7xIKvcGOdYemozCSXx5wbQ', 'thread_vdjnRiHraY2EEqhGhiO5DepZ', 'thread_zebAasGFazzX48vG04SRW12k', 'thread_K1GtChJBIOBKoUmPw2aFvaeV']"
6,855.0758125782013,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_ZFCJ2pvyGhhxFDqould9nJWr', 'thread_G1jo4KI50GUmDWkhONFyFbo7', 'thread_FMkn7pDyROz1iZcVpc5SVqhx', 'thread_6P7HCBCXiywtT4fDuaOxsg8f', 'thread_7PgFlrBRyVMZLYvVxYP0LgX7', 'thread_hvX9UzCeURISGATxbjQRuWaM']"
7,718.9743001461029,30,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) !(operator != _operator) || _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_1wFCUFrgyfewwwEoR1BcY8bI', 'thread_bBHHUGoJ0yDp2Tm8okUXHvN7', 'thread_e7hc01CxHhyjF13drw2QpQCt', 'thread_d0lmeGfzzbhqja6CIO5ztwGS', 'thread_Y7hTo3tbUeMBq5m5gTuKgCYR', 'thread_GjY0Vw9xpNyuq0PQ9BrmfERZ']"
8,974.0488147735596,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition _operatorApprovals[__verifier_old_address(msg.sender)][_operator] != _approved || _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_rkigevLtMkM8RIPeGGGkY3iU', 'thread_iuMINqTohsZzbgtSSibSPBS4', 'thread_rDItJfBboAh9kmHXYdQ2OelW', 'thread_FgugiJAlOTVLyRHGdJM4sgoa', 'thread_1oFCnUn49nUAxNlVbyVgUsQG', 'thread_AXGwZJmKoSClv5gIxTwPNR6y']"
9,791.008926153183,33,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address operator) _operatorApprovals[msg.sender][operator] == __verifier_old_bool(_operatorApprovals[msg.sender][operator]) || operator == _operator
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_wWjWgWd4RSzkMBPGg3LR7WUd', 'thread_BFxFmexMjo3ua139u3SZCSrS', 'thread_PBRLrhU2CzPozCn3iTJi1p1p', 'thread_Rfx8PsHjXRSZuXWnoj9blqNy', 'thread_9xBVFriNxYjAhhRLEk825bWw', 'thread_lgzGEBeguJaapPnUZQUkdiSt']"
10,1516.4699437618256,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_7vNGIJGmoqS6DEojZwI6EYGa', 'thread_PJMwjazajgUwNWggn4e8tUow', 'thread_XMgKujRpGKY2ALfwRnrNjyke', 'thread_crDVq1ogfFkjiYpe2teN8M1m', 'thread_eyUAwUgdxzFW2AJRo7VQiPS0', 'thread_ajeI6gueRJSg4uqUCYNLOHZK']"
