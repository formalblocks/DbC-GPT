run,time_taken,iterations,verified,annotated_contract,function_status,status
1,94.82021832466125,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == __verifier_old_bool(isApprovedForAll(_owner, _operator))
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
2,74.31911897659302,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
3,106.16847944259644,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    /// @notice postcondition balance >= 0
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] >= 0
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    /// @notice postcondition !(msg.sender == _operator)
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == __verifier_old_bool(isApprovedForAll(_owner, _operator))
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    /// @notice postcondition _to != address(0)
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    /// @notice postcondition _to != address(0)
    /// @notice postcondition _ids.length == _values.length
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
4,82.21755290031433,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
5,78.38121438026428,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
6,85.7414174079895,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
7,91.98027348518372,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
8,83.17113733291626,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == balanceOf(_owners[i], _ids[i])
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == isApprovedForAll(_owner, _operator)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
9,90.73224067687988,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == __verifier_old_bool(isApprovedForAll(_owner, _operator))
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
10,89.30274510383606,6,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /**
    /// @notice postcondition balance == __verifier_old_uint(balanceOf(_owner, _id))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(balanceOf(_owners[i], _ids[i]))
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
    /// @notice postcondition isApprovedForAll(msg.sender, _operator) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /**
    /// @notice postcondition approved == __verifier_old_bool(isApprovedForAll(_owner, _operator))
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /**
    /// @notice postcondition balanceOf(_from, _id) == __verifier_old_uint(balanceOf(_from, _id)) - _value
    /// @notice postcondition balanceOf(_to, _id) == __verifier_old_uint(balanceOf(_to, _id)) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /**
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_from, _ids[i]) == __verifier_old_uint(balanceOf(_from, _ids[i])) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || balanceOf(_to, _ids[i]) == __verifier_old_uint(balanceOf(_to, _ids[i])) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Verified', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[]
