run,time_taken,iterations,verified,annotated_contract,status
1,129.09223461151123,4,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition !(success) || (_to == msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value)
    /// @notice postcondition !(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value ) || (_to == msg.sender)
    /// @notice postcondition !(success) || ( _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value ) || (_to == msg.sender)
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _value <= __verifier_old_uint(_allowed[_from][msg.sender])
    /// @notice postcondition !(success) || (_from == _to || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value)
    /// @notice postcondition !(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value ) || (_from == _to)
    /// @notice postcondition !(success) || ( _balances[_from] == __verifier_old_uint(_balances[_from]) - _value ) || (_from == _to)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _allowed[msg.sender][_spender]
    /// @notice postcondition success
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value )' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '!(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value )' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || ( _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value )' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || ( _balances[_from] == __verifier_old_uint(_balances[_from]) - _value )' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || (_to == msg.sender && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '!(success) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
2,388.77797770500183,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:59:5: Postcondition 'remaining == _allowed[_owner][msg.sender]' might not hold at end of function.\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:59:5: Postcondition 'remaining == _allowed[_owner][msg.sender] || (_allowed[_owner][msg.sender] == __verifier_old_uint(remaining))' might not hold at end of function.\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '!( _from == _to)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:59:5: Postcondition 'remaining == _allowed[_owner][msg.sender]' might not hold at end of function.\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition '_balances[_owner] >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:60:5: Postcondition 'remaining == _allowed[_owner][msg.sender]' might not hold at end of function.\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition '_balances[_owner] >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:47:5: Postcondition '_owner == msg.sender || balance >= 0' might not hold at end of function.\nERC20::allowance: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:59:5: Postcondition 'remaining == _allowed[_owner][msg.sender]' might not hold at end of function.\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_balances[_owner] >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
3,75.09261274337769,2,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || ( _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) )
    /// @notice postcondition !( _value > __verifier_old_uint(_balances[msg.sender])) || success
    /// @notice postcondition _to == msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value
    /// @notice postcondition _to != msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to])

    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) )
    /// @notice postcondition !( _value > __verifier_old_uint(_balances[_from])) || success
    /// @notice postcondition _from == _to || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value)
    /// @notice postcondition _from != _to || (_balances[_from] == __verifier_old_uint(_balances[_from]))

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition success
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || (__verifier_old_uint(_allowed[msg.sender][_spender]) == _value)

    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition 'forall (uint x) !(msg.sender == _to) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition 'forall (uint x) !(_from == _to) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
4,165.341210603714,5,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _to == msg.sender || success
    /// @notice postcondition _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition success || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _to == msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || success
    /// @notice postcondition _to == msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || !success
    /// @notice postcondition _to != msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to])

    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _from != _to || success
    /// @notice postcondition _value <= __verifier_old_uint(_allowed[_from][msg.sender])
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || success == false || _from == _to
    /// @notice postcondition success || _balances[_from] == __verifier_old_uint(_balances[_from])
    /// @notice postcondition success || _from == _to || _balances[_from] == __verifier_old_uint(_balances[_from])
    /// @notice postcondition success || _balances[_to] == __verifier_old_uint(_balances[_to])
    /// @notice postcondition success || __verifier_old_uint(_allowed[_from][msg.sender]) - _value == _allowed[_from][msg.sender]

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition success || _allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender])
    /// @notice postcondition _allowed[msg.sender][_spender] == (__verifier_old_uint(_allowed[msg.sender][_spender]) - _value) || success
    /// @notice postcondition success

    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value )' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:114:5: Postcondition '!(success) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value )' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || !success' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _to != msg.sender || !success' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!success || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:114:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:114:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || success == false' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
5,270.9191780090332,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value <= __verifier_old_uint(_balances[_from]) && _from != _to)' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value <= __verifier_old_uint(_balances[_from]) && _from != _to)' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nError while running verifier, details:\n----- Verifier output -----\nIllegal instruction\n\n---------------------------\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::totalSupply: ERROR\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(0 <= _value) || (_balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_value <= _allowed[_from][msg.sender]' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(0 <= _value) || (_balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
6,257.3887047767639,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition 'forall (uint x) !(msg.sender == _to) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || (_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || (_value == 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || (_value == 0 && _balances[_to] == __verifier_old_uint(_balances[_to]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) + _value || (_value == 0 && _balances[_from] == __verifier_old_uint(_balances[_from]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || (_value == 0) || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(msg.sender == _from) || _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
7,279.6099455356598,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_value == 0 || !(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_value == 0 || !(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!success || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) ' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!success || _balances[_from] == __verifier_old_uint(_balances[_from]) ' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_value == 0 || !(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_value == 0 || !(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_value == 0 || !(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint x) !(0 <= x && x < _allowed[_from][_to]) || _allowed[_from][_to] == __verifier_old_uint(_allowed[_from][_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_value == 0 || !(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
8,292.1301443576813,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition 'balance >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition '!(msg.sender == _spender)' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_balances[_owner] >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition '!(msg.sender == _spender)' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner != address(0) || balance == 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition '_spender != msg.sender' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner == address(0) || balance >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition '!(msg.sender == _spender)' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner == address(0) || balance >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition 'msg.sender != _spender' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner != address(0) || balance == 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition 'msg.sender != _spender' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition 'msg.sender != _spender' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner != address(0) || balance == 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition '!(msg.sender == _spender)' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:48:5: Postcondition '_owner == address(0) || balance >= 0' might not hold at end of function.\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:92:5: Postcondition 'msg.sender != _spender' might not hold at end of function.\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '_from == _to || (_balances[_from] == __verifier_old_uint(_balances[_from]) + _value)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
9,280.36263489723206,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || (_value == 0 && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(0 <= _value) || _to != msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '_to != msg.sender || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '_from != _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint x) !(msg.sender == _from) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
10,136.3681972026825,4,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _to != msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition success || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _value <= __verifier_old_uint(_balances[msg.sender]) || !success
    /// @notice postcondition _to == msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to]) || success
    /// @notice postcondition !(success) || _to != msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to])
    /// @notice postcondition !(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _to == msg.sender
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) || success
    /// @notice postcondition _value <= __verifier_old_uint(_allowed[_from][msg.sender]) || !success
    /// @notice postcondition _from != _to || _balances[_from] == __verifier_old_uint(_balances[_from])
    /// @notice postcondition success || _balances[_from] == __verifier_old_uint(_balances[_from])
    /// @notice postcondition !(success) || _from == _to || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _value
    /// @notice postcondition success
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition 'forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) ' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '!(success) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value) ' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition 'forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) ' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '!(success) || (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value) ' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition 'forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) ' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:112:5: Postcondition '!(success) || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition 'forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) ' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
