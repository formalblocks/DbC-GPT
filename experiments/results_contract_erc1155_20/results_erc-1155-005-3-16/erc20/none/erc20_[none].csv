run,time_taken,iterations,verified,annotated_contract,status
1,330.0302176475525,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address x) !(x == _to && _balances[x] == __verifier_old_uint(_balances[x])) || (x != msg.sender && _balances[x] == __verifier_old_uint(_balances[x]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition 'forall (address x) !(x == _to && _balances[x] == __verifier_old_uint(_balances[x])) || (x != _from && _balances[x] == __verifier_old_uint(_balances[x]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])) || (success && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:107:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_value <= _balances[msg.sender] || !success' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '_value <= _balances[_from] || !success' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])) || (success && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:109:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || (_value == 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '!(success) || (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value) || (_value == 0)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition 'forall (uint z) !(0 <= z && z < _allowed[_from][msg.sender]) || (_allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender])) || (success && _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]))' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:110:5: Postcondition '!(success) || (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value) || (_value == 0)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
2,249.79981184005737,4,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) || (x == _to && _balances[x] == __verifier_old_uint(_balances[x]) + _value)
    /// @notice postcondition _value == 0 || _to != msg.sender || __verifier_old_uint(_balances[msg.sender]) == _balances[msg.sender]
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value <= __verifier_old_uint(_balances[_from])
    /// @notice postcondition forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) || (x == _to && _balances[x] == __verifier_old_uint(_balances[x]) + _value)
    /// @notice postcondition _value == 0 || _from != _to || __verifier_old_uint(_balances[_from]) == _balances[_from]
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(0 < _value) || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:105:5: Postcondition '!(0 < _value) || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_value == 0 || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:105:5: Postcondition '_value == 0 || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(0 < _value) || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:105:5: Postcondition '!(0 < _value) || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
3,284.59423637390137,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(0 < _value) || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '!(0 < _value) || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '!(0 < _value) || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '!(0 < _value) || _balances[_from] == __verifier_old_uint(_balances[_from])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_value == 0 || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) || _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
4,33.99608850479126,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _to != msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _to == msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value
    /// @notice postcondition msg.sender == _to || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value
    /// @notice postcondition !(msg.sender == _to) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_from])
    /// @notice postcondition _from == _to || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value
    /// @notice postcondition _from != _to || _balances[_from] == __verifier_old_uint(_balances[_from])
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) + _value || _from == _to
    /// @notice postcondition _from != _to || _balances[_to] == __verifier_old_uint(_balances[_to])
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
5,119.30496382713318,3,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _to == msg.sender
    /// @notice postcondition forall (address x) !(x == _to) || _balances[x] == __verifier_old_uint(_balances[x]) + (_value) || _balances[x] == __verifier_old_uint(_balances[x])
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) || _value <= __verifier_old_uint(_allowed[_from][msg.sender])
    /// @notice postcondition forall (address x) !(x == _from) || _balances[x] == __verifier_old_uint(_balances[x]) - _value || _balances[x] == __verifier_old_uint(_balances[x])
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) != _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:71:5: Postcondition 'forall (address x) !(x == _to) || _balances[x] == __verifier_old_uint(_balances[x]) + (_value) || !(0 <= _value && _value <= __verifier_old_uint(_balances[msg.sender]))' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:103:5: Postcondition 'forall (address x) !(x == _from) || _balances[x] == __verifier_old_uint(_balances[x]) + (_value) || !(0 <= _value && _value <= __verifier_old_uint(_balances[_from]))' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:103:5: Postcondition 'forall (address x) !(x == _from) || _balances[x] == __verifier_old_uint(_balances[x]) + (_value) || _balances[x] == __verifier_old_uint(_balances[x])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
6,28.60524845123291,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) || (x == _to && _balances[x] == __verifier_old_uint(_balances[x]) + _value)
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) || _value <= __verifier_old_uint(_allowed[_from][msg.sender])
    /// @notice postcondition forall (address x) _to != x || _balances[x] == __verifier_old_uint(_balances[x]) || (x == _to && _balances[x] == __verifier_old_uint(_balances[x]) + _value)
    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value <= __verifier_old_uint(_balances[_from])
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _allowed[msg.sender][_spender]
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
7,302.8039638996124,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition '_balances[_from] == __verifier_old_uint(_balances[_from]) - _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]) || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value || _from == msg.sender' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= __verifier_old_uint(_balances[msg.sender]) || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition '_balances[msg.sender] >= _value || _to == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_allowed[_from][msg.sender] >= _value' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_balances[_from] >= _value || _from == _to' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_to == _from || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
8,331.40274000167847,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || !(success)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '_balances[_to] == __verifier_old_uint(_balances[_to]) + _value || !(success)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition 'forall (uint x) !(0 <= x && x < _value) || _balances[_to] == __verifier_old_uint(_balances[_to]) + x' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:74:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value == 0' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:111:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _value == 0' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:113:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:75:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:114:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:114:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from != _to' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:76:5: Postcondition '!(success) || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _to != msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) || _value == 0' might not hold at end of function.\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:115:5: Postcondition '!(success) || _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from != _to || !(success)' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
9,264.92424273490906,10,False,,"[""Interaction: 2\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || (y == _to && _balances[y] == __verifier_old_uint(_balances[y]) - _value)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 3\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || y == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || y == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || y == msg.sender || _balances[y] == __verifier_old_uint(_balances[y])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || y == msg.sender' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:72:5: Postcondition 'forall (address y) _to != y || _balances[y] == __verifier_old_uint(_balances[y]) || (y == msg.sender)' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: OK\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
10,152.4988718032837,5,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /**
    * Returns the total token supply.
    */
    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /**
    * Transfers `_value` amount of tokens to address `_to`, and MUST fire the `Transfer` event.
    * The function SHOULD `throw` if the message caller's account balance does not have enough tokens to spend.

    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value || _value <= __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition _to != msg.sender || _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])
    /// @notice postcondition forall (uint x) !(0 <= x && x < _allowed[msg.sender][_to]) || _allowed[msg.sender][_to] == __verifier_old_uint(_allowed[msg.sender][_to])
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) || _value > 0
    /// @notice postcondition _to == msg.sender || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value
    function transfer(address _to, uint256 _value) public returns (bool success);

    /**
    * Transfers `_value` amount of tokens from address `_from` to address `_to`, and MUST fire the `Transfer` event.
    * The `transferFrom` method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.
    * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.
    * The function SHOULD `throw` unless the `_from` account has deliberately authorized the sender of the message via some mechanism.
    * *Note* Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.
    */
    /// @notice postcondition _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) || _value <= __verifier_old_uint(_allowed[_from][msg.sender])
    /// @notice postcondition _balances[_from] == __verifier_old_uint(_balances[_from]) - _value || _from == _to
    /// @notice postcondition _balances[_to] == __verifier_old_uint(_balances[_to]) || _value > 0
    /// @notice postcondition _from != _to || _balances[_to] == __verifier_old_uint(_balances[_to])
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /**
    * Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount. If this function is called again it overwrites the current allowance with `_value`.
    */
    /// @notice postcondition _allowed[msg.sender][_spender] == _value || __verifier_old_uint(_allowed[msg.sender][_spender]) == _value
    function approve(address _spender, uint256 _value) public returns (bool success);

    /**
    * Returns the account balance of another account with address `_owner`.
    */
    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /**
    * Returns the amount which `_spender` is still allowed to withdraw from `_owner`.
    */
    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
","[""Interaction: 4\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:73:5: Postcondition 'forall (uint y) !(0 <= y && y < _balances[_to]) || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:106:5: Postcondition 'forall (uint y) !(0 <= y && y < _balances[_to]) || _balances[_to] == __verifier_old_uint(_balances[_to])' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nERC20::totalSupply: OK\nERC20::balanceOf: OK\nERC20::allowance: OK\nERC20::transfer: OK\nERC20::approve: OK\nERC20::transferFrom: ERROR\n - ./solc_verify_generator/ERC20/imp/ERC20_merge.sol:108:5: Postcondition '_from != _to || _balances[_to] == __verifier_old_uint(_balances[_to]) + _value' might not hold at end of function.\nERC20::increaseAllowance: OK\nERC20::decreaseAllowance: OK\nERC20::[implicit_constructor]: OK\nIERC20::[implicit_constructor]: OK\nErrors were found by the verifier.\n\n""]"
