run,time_taken,iterations,verified,annotated_contract,status
1,24.20005702972412,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
2,23.356132745742798,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
3,20.876232385635376,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
4,31.995311737060547,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
5,20.84731960296631,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
6,26.421499252319336,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || ( _balances[_to] == __verifier_old_uint(_balances[_to]) && msg.sender == _to ) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_balances[_to] == __verifier_old_uint(_balances[_to]) && _from == _to) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
7,32.219029664993286,1,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition balance == _balances[_owner]
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition remaining == _allowed[_owner][_spender]
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
8,22.548708200454712,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
9,26.954802989959717,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
10,21.139427423477173,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice postcondition ( (_balances[msg.sender] == __verifier_old_uint(_balances[msg.sender]) - _value && msg.sender != _to) || (msg.sender == _to && _balances[msg.sender] == __verifier_old_uint(_balances[msg.sender])) ) && success || !success
    /// @notice postcondition ( _balances[_to] == __verifier_old_uint(_balances[_to]) + _value && msg.sender != _to ) || (msg.sender == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) && success || !success
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition ( (_balances[_from] == __verifier_old_uint(_balances[_from]) - _value && _from != _to) || (_from == _to && _balances[_from] == __verifier_old_uint(_balances[_from])) ) && success || !success
    /// @notice postcondition ( (_balances[_to] == __verifier_old_uint(_balances[_to]) + _value && _from != _to) || (_from == _to && _balances[_to] == __verifier_old_uint(_balances[_to])) ) && success || !success
    /// @notice postcondition ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) - _value && success ) || ( _allowed[_from][msg.sender] == __verifier_old_uint(_allowed[_from][msg.sender]) && !success ) || _from == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
