run,time_taken,iterations,verified,annotated_contract,status
1,63.06900382041931,1,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId == 0 || _tokenOwner[_tokenId] != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    /// @notice postcondition _tokenOwner[_tokenId] == msg.sender || _tokenApprovals[_tokenId] == __verifier_old_address(_approved)
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:51:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
2,53.72920823097229,1,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId == 0 || _tokenOwner[_tokenId] != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nError while running verifier, details:\n----- Verifier output -----\nIllegal instruction\n\n---------------------------\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:51:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nSafeMath::sub: ERROR\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
3,26.53240180015564,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
4,28.018500566482544,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
5,90.52703142166138,2,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId == 0 || _tokenOwner[_tokenId] != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:51:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", 'Interaction: 2\nError while running verifier, details:\n----- Verifier output -----\n\n---------------------------\nERC165::supportsInterface: OK\n[event] ERC721::Approval: ERROR\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n']"
6,34.42476415634155,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId != 0 || _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
7,27.358910083770752,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId != 0 || _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
8,69.77359795570374,1,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId == 0 || _tokenOwner[_tokenId] != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    /// @notice postcondition _tokenOwner[_tokenId] == msg.sender || _tokenApprovals[_tokenId] == __verifier_old_address(_approved)
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:51:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
9,86.60333228111267,2,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId != 0 || _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    /// @notice postcondition msg.sender == _tokenOwner[_tokenId] || _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:60:5: Postcondition '_tokenOwner[_tokenId] == msg.sender || _tokenApprovals[_tokenId] == address(0)' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 2\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: OK\nERC721::approve: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:60:5: Postcondition 'msg.sender == _tokenOwner[_tokenId] || _tokenApprovals[_tokenId] == address(0)' might not hold at end of function.\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
10,70.19928073883057,1,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _tokenId == 0 || _tokenOwner[_tokenId] != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved 
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( ( _ownedTokensCount[_from] ==  __verifier_old_uint (_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition ( ( _ownedTokensCount[_to] ==  __verifier_old_uint (_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _from == _to ) )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
","[""Interaction: 1\nERC165::supportsInterface: OK\nERC721::[constructor]: OK\nERC721::balanceOf: OK\nERC721::ownerOf: ERROR\n - ./solc_verify_generator/ERC721/imp/ERC721_merge.sol:51:5: Postcondition '_tokenId != 0 || _owner == address(0)' might not hold at end of function.\nERC721::approve: OK\nERC721::getApproved: OK\nERC721::setApprovalForAll: OK\nERC721::isApprovedForAll: OK\nERC721::transferFrom: OK\nERC721::safeTransferFrom: OK\nERC721::safeTransferFrom: OK\nIERC165::[implicit_constructor]: OK\nIERC721Receiver::[implicit_constructor]: OK\nUse --show-warnings to see 3 warnings.\nErrors were found by the verifier.\n\n""]"
