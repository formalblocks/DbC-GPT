SyncCursorPage[Message](data=[Message(id='msg_1PkyRHRL545WcmQoSTZNYU2K', assistant_id='asst_8AOYbeZmLBx8Uic6tFUGBjhF', attachments=[], completed_at=None, content=[TextContentBlock(text=Text(annotations=[], value='```solidity\npragma solidity >= 0.5.0;\n\ncontract ERC1155  {\n\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n    event URI(string value, uint256 indexed id);\n\n    // Mapping from token ID to account balances\n    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n        @notice postcondition _balances[_id][_owner] == balance\n    */\n    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);\n    \n    /**\n        @notice postcondition batchBalances.length == _owners.length\n        @notice postcondition batchBalances.length == _ids.length\n        @notice postcondition forall (uint x) !( 0 <= x &&  x < batchBalances.length ) || batchBalances[x] == _balances[_ids[x]][_owners[x]]\n    */\n    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);\n\n    /**\n        @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved\n    */\n    function setApprovalForAll(address _operator, bool _approved) public;\n\n    /**\n        @notice postcondition _operatorApprovals[_owner][_operator] == approved\n    */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);\n\n    /**\n        @notice postcondition _to != address(0)\n        @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender\n        @notice postcondition __verifier_old_uint (_balances[_id][_from]) >= _value\n        @notice postcondition _balances[_id][_from] == __verifier_old_uint (_balances[_id][_from]) - _value\n        @notice postcondition _balances[_id][_to] == __verifier_old_uint (_balances[_id][_to]) + _value\n    */\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;\n\n    /**\n        @notice postcondition forall (uint i) !(0 <= i && i < _ids.length && _from != _to) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])\n        @notice postcondition forall (uint i) !(0 <= i && i < _ids.length && _from != _to) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])\n    */\n    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;\n}\n```'), type='text')], created_at=1717552148, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message', role='assistant', run_id='run_jsJm0Fzsu8Kh2JdOMNQltXWu', status=None, thread_id='thread_RS2QrBoSwn7QRUIdlOHfarIY'), Message(id='msg_QBhTfyg8HD7EhokC8GatST73', assistant_id=None, attachments=[], completed_at=None, content=[TextContentBlock(text=Text(annotations=[], value='\n            Given an examaple of ERC interface, the ERC interface to be annotated and an EIP markdown, generate a specification for the ERC interface with solc-verify postconditions annotations, just postconditions, no other annotations types, this is very important!\n\n            Instructions:\n\n            - Function Bodies: The specification must not contain function implementations.\n            - Postconditions Limit: Each function must have at most 4 postcondition (/// @notice postcondition) annotations above the function signature. Do not exceed this limit under any circumstances.\n            - Position: add the solc-verify annotation above the related function, example:\n                /// @notice postcondition supply == _totalSupply\n                function totalSupply() public view returns (uint256 supply);\n            - Output format: return the annotated interface inside code fence (```) to show the code block. RETURN JUST THE CONTRACT ANNOTATED, NOTHING MORE.\n\n            Guidance for Generating Postconditions:\n\n            - State Changes: Reflect how state variables change. For example, ownership transfer should reflect changes in token ownership and balances.\n            - Conditions on Input: Consider how inputs affect the state variables.\n            - Reset Conditions: Ensure certain variables are reset after the function execution, if applicable.\n\n            ERC interface example:\n            ```solidity\n                pragma solidity >=0.5.0;\n                \n                contract ERC20 {\n\n                    mapping (address => uint) _balances;\n                    mapping (address => mapping (address => uint)) _allowed;\n                    uint public _totalSupply;\n\n                    event Transfer(address indexed _from, address indexed _to, uint _value);\n                    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n                    /// @notice postcondition supply == _totalSupply\n                    function totalSupply() public view returns (uint256 supply);\n\n                    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint (_balances[msg.sender] ) - _value  && msg.sender  != _to ) ||   ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender]) && msg.sender  == _to ) &&  success )   || !success\n                    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) ||   ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to )  )   || !success\n                    function transfer(address _to, uint256 _value) public returns (bool success);\n\n                    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint (_balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from == _to ) && success ) || !success \n                    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) && success ) || !success \n                    /// @notice  postcondition ( _allowed[_from ][msg.sender] ==  __verifier_old_uint (_allowed[_from ][msg.sender] ) - _value && success) || ( _allowed[_from ][msg.sender] ==  __verifier_old_uint (_allowed[_from ][msg.sender]) && !success) ||  _from  == msg.sender\n                    /// @notice  postcondition  _allowed[_from ][msg.sender]  <= __verifier_old_uint (_allowed[_from ][msg.sender] ) ||  _from  == msg.sender\n                    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n                    /// @notice  postcondition (_allowed[msg.sender ][ _spender] ==  _value  &&  success) || ( _allowed[msg.sender ][ _spender] ==  __verifier_old_uint ( _allowed[msg.sender ][ _spender] ) && !success )    \n                    function approve(address _spender, uint256 _value) public returns (bool success);\n\n                    /// @notice postcondition _balances[_owner] == balance\n                    function balanceOf(address _owner) public view returns (uint256 balance);\n\n                    /// @notice postcondition _allowed[_owner][_spender] == remaining\n                    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n                }\n            ```\n\n            ERC interface example:\n            ```solidity\n                contract ERC1155  {\n                    /// @notice postcondition _balances[_id][_owner] == balance  \n                    function balanceOf(address _owner, uint256 _id) public view   returns (uint256 balance);\n                    \n                    /// @notice postcondition batchBalances.length == _owners.length \n                    /// @notice postcondition batchBalances.length == _ids.length\n                    /// @notice postcondition forall (uint x) !( 0 <= x &&  x < batchBalances.length ) || batchBalances[x] == _balances[_ids[x]][_owners[x]]\n                    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);\n\n                    /// @notice  postcondition _operatorApprovals[msg.sender][_operator] ==  _approved \n                    function setApprovalForAll(address _operator, bool _approved) public;\n\n                    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved\n                    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);\n\n                    /// @notice postcondition _to != address(0) \n                    /// @notice postcondition _operatorApprovals[_from][msg.sender] || _from == msg.sender\n                    /// @notice postcondition __verifier_old_uint ( _balances[_id][_from] ) >= _value    \n                    /// @notice postcondition _balances[_id][_from] == __verifier_old_uint ( _balances[_id][_from] ) - _value\n                    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint ( _balances[_id][_to] ) + _value\n                    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;\n\n                    ///@notice postcondition forall (uint i) !(0 <= i && i < _ids.length && _from != _to) || (_balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i])\n                    ///@notice postcondition forall (uint i) !(0 <= i && i < _ids.length && _from != _to) || (_balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i])\n                    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;\n                }\n            ```\n                      \n            Can you please generate a specification given the following ERC interface (delimited by token ```solidity ```) and EIP markdown (delimited by token <eip>)?\n\n            HERE FOLLOWS THE CONTRACT TO ADD SOLC-VERIFY ANNOTATIONS, LIKE THE EXAMPLES ABOVE:\n                      \n            ```solidity\n                pragma solidity >= 0.5.0;\n\n                contract ERC1155  {\n\n                    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n                    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n                    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n                    event URI(string value, uint256 indexed id);\n\n                    // Mapping from token ID to account balances\n                    mapping (uint256 => mapping(address => uint256)) private _balances;\n\n                    // Mapping from account to operator approvals\n                    mapping (address => mapping(address => bool)) private _operatorApprovals;\n\n                    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n                    string private _uri;\n\n                    /**\n                        @notice Get the balance of an account\'s tokens.\n                        @param _owner  The address of the token holder\n                        @param _id     ID of the token\n                        @return        The _owner\'s balance of the token type requested\n                    */\n                    $ADD POSTCONDITION HERE\n                    function balanceOf(address _owner, uint256 _id) public view   returns (uint256 balance);\n                    \n                    /**\n                        @notice Get the balance of multiple account/token pairs\n                        @param _owners The addresses of the token holders\n                        @param _ids    ID of the tokens\n                        @return        The _owner\'s balance of the token types requested (i.e. balance for each (owner, id) pair)\n                    */\n                    $ADD POSTCONDITION HERE\n                    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);\n\n                    /**\n                        @notice Enable or disable approval for a third party ("operator") to manage all of the caller\'s tokens.\n                        @dev MUST emit the ApprovalForAll event on success.\n                        @param _operator  Address to add to the set of authorized operators\n                        @param _approved  True if the operator is approved, false to revoke approval\n                    */\n                    $ADD POSTCONDITION HERE\n                    function setApprovalForAll(address _operator, bool _approved) public;\n\n                    /**\n                        @notice Queries the approval status of an operator for a given owner.\n                        @param _owner     The owner of the tokens\n                        @param _operator  Address of authorized operator\n                        @return           True if the operator is approved, false if not\n                    */\n                    $ADD POSTCONDITION HERE\n                    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);\n\n                    /**\n                        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n                        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n                        MUST revert if `_to` is the zero address.\n                        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n                        MUST revert on any other error.\n                        MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard).\n                        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).        \n                        @param _from    Source address\n                        @param _to      Target address\n                        @param _id      ID of the token type\n                        @param _value   Transfer amount\n                        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n                    */\n                    $ADD POSTCONDITION HERE\n                    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;\n\n                    /**\n                        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n                        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n                        MUST revert if `_to` is the zero address.\n                        MUST revert if length of `_ids` is not the same as length of `_values`.\n                        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n                        MUST revert on any other error.        \n                        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard).\n                        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n                        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).                      \n                        @param _from    Source address\n                        @param _to      Target address\n                        @param _ids     IDs of each token type (order and length must match _values array)\n                        @param _values  Transfer amounts per token type (order and length must match _ids array)\n                        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n                    */\n                    $ADD POSTCONDITION HERE\n                    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) public;\n                }\n            ```\n            \n            EIP ERC1155 markdown below:\n\n            <eip>\n                ---\n                eip: 1155\n                title: Multi Token Standard\n                author: Witek Radomski <witek@enjin.io>, Andrew Cooke <ac0dem0nk3y@gmail.com>, Philippe Castonguay (@phabc) <pc@horizongames.net>, James Therien <james@turing-complete.com>, Eric Binet <eric@enjin.io>, Ronan Sandford (@wighawag) <wighawag@gmail.com>\n                type: Standards Track\n                category: ERC\n                status: Final\n                created: 2018-06-17\n                discussions-to: https://github.com/ethereum/EIPs/issues/1155\n                requires: 165\n                ---\n\n                ## Simple Summary\n\n                A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens or other configurations (e.g. semi-fungible tokens).\n\n                ## Abstract\n\n                This standard outlines a smart contract interface that can represent any number of fungible and non-fungible token types. Existing standards such as ERC-20 require deployment of separate contracts per token type. The ERC-721 standard\'s token ID is a single non-fungible index and the group of these non-fungibles is deployed as a single contract with settings for the entire collection. In contrast, the ERC-1155 Multi Token Standard allows for each token ID to represent a new configurable token type, which may have its own metadata, supply and other attributes.\n\n                The `_id` argument contained in each function\'s argument set indicates a specific token or token type in a transaction.\n\n                ## Motivation\n\n                Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each token type or collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of blockchain games and platforms like Enjin Coin, game developers may be creating thousands of token types, and a new type of token standard is needed to support them. However, ERC-1155 is not specific to games and many other applications can benefit from this flexibility.\n\n                New functionality is possible with this design such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to "approve" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible token types in a single contract.\n\n                ## Specification\n\n                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.\n\n                **Smart contracts implementing the ERC-1155 standard MUST implement all of the functions in the `ERC1155` interface.**\n\n                **Smart contracts implementing the ERC-1155 standard MUST implement the ERC-165 `supportsInterface` function and MUST return the constant value `true` if `0xd9b67a26` is passed through the `interfaceID` argument.**\n\n                ```solidity\n                pragma solidity ^0.5.9;\n\n                /**\n                    @title ERC-1155 Multi Token Standard\n                    @dev See https://eips.ethereum.org/EIPS/eip-1155\n                    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\n                */\n                interface ERC1155 /* is ERC165 */ {\n                    /**\n                        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).\n                        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                        The `_from` argument MUST be the address of the holder whose balance is decreased.\n                        The `_to` argument MUST be the address of the recipient whose balance is increased.\n                        The `_id` argument MUST be the token type being transferred.\n                        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n                        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n                        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).        \n                    */\n                    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n\n                    /**\n                        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see "Safe Transfer Rules" section of the standard).      \n                        The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                        The `_from` argument MUST be the address of the holder whose balance is decreased.\n                        The `_to` argument MUST be the address of the recipient whose balance is increased.\n                        The `_ids` argument MUST be the list of tokens being transferred.\n                        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\n                        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\n                        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).                \n                    */\n                    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n\n                    /**\n                        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absence of an event assumes disabled).        \n                    */\n                    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n                    /**\n                        @dev MUST emit when the URI is updated for a token ID.\n                        URIs are defined in RFC 3986.\n                        The URI MUST point to a JSON file that conforms to the "ERC-1155 Metadata URI JSON Schema".\n                    */\n                    event URI(string _value, uint256 indexed _id);\n\n                    /**\n                        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n                        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n                        MUST revert if `_to` is the zero address.\n                        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n                        MUST revert on any other error.\n                        MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard).\n                        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).        \n                        @param _from    Source address\n                        @param _to      Target address\n                        @param _id      ID of the token type\n                        @param _value   Transfer amount\n                        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n                    */\n                    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n\n                    /**\n                        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n                        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n                        MUST revert if `_to` is the zero address.\n                        MUST revert if length of `_ids` is not the same as length of `_values`.\n                        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n                        MUST revert on any other error.        \n                        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard).\n                        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n                        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).                      \n                        @param _from    Source address\n                        @param _to      Target address\n                        @param _ids     IDs of each token type (order and length must match _values array)\n                        @param _values  Transfer amounts per token type (order and length must match _ids array)\n                        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n                    */\n                    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n\n                    /**\n                        @notice Get the balance of an account\'s tokens.\n                        @param _owner  The address of the token holder\n                        @param _id     ID of the token\n                        @return        The _owner\'s balance of the token type requested\n                    */\n                    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n                    /**\n                        @notice Get the balance of multiple account/token pairs\n                        @param _owners The addresses of the token holders\n                        @param _ids    ID of the tokens\n                        @return        The _owner\'s balance of the token types requested (i.e. balance for each (owner, id) pair)\n                    */\n                    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n                    /**\n                        @notice Enable or disable approval for a third party ("operator") to manage all of the caller\'s tokens.\n                        @dev MUST emit the ApprovalForAll event on success.\n                        @param _operator  Address to add to the set of authorized operators\n                        @param _approved  True if the operator is approved, false to revoke approval\n                    */\n                    function setApprovalForAll(address _operator, bool _approved) external;\n\n                    /**\n                        @notice Queries the approval status of an operator for a given owner.\n                        @param _owner     The owner of the tokens\n                        @param _operator  Address of authorized operator\n                        @return           True if the operator is approved, false if not\n                    */\n                    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n                }\n                ```\n\n                ### ERC-1155 Token Receiver\n\n                **Smart contracts MUST implement all of the functions in the `ERC1155TokenReceiver` interface to accept transfers. See "Safe Transfer Rules" for further detail.**\n\n                **Smart contracts MUST implement the ERC-165 `supportsInterface` function and signify support for the `ERC1155TokenReceiver` interface to accept transfers. See "ERC1155TokenReceiver ERC-165 rules" for further detail.**\n\n                ```solidity\n                pragma solidity ^0.5.9;\n\n                /**\n                    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n                */\n                interface ERC1155TokenReceiver {\n                    /**\n                        @notice Handle the receipt of a single ERC1155 token type.\n                        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.        \n                        This function MUST return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n                        This function MUST revert if it rejects the transfer.\n                        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n                        @param _operator  The address which initiated the transfer (i.e. msg.sender)\n                        @param _from      The address which previously owned the token\n                        @param _id        The ID of the token being transferred\n                        @param _value     The amount of tokens being transferred\n                        @param _data      Additional data with no specified format\n                        @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n                    */\n                    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\n\n                    /**\n                        @notice Handle the receipt of multiple ERC1155 token types.\n                        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.        \n                        This function MUST return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n                        This function MUST revert if it rejects the transfer(s).\n                        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n                        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\n                        @param _from      The address which previously owned the token\n                        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\n                        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\n                        @param _data      Additional data with no specified format\n                        @return           `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n                    */\n                    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);       \n                }\n                ```\n\n                ### Safe Transfer Rules\n\n                To be more explicit about how the standard `safeTransferFrom` and `safeBatchTransferFrom` functions MUST operate with respect to the `ERC1155TokenReceiver` hook functions, a list of scenarios and rules follows.\n\n                #### Scenarios\n\n                **_Scenario#1 :_** The recipient is not a contract.\n                * `onERC1155Received` and `onERC1155BatchReceived` MUST NOT be called on an EOA (Externally Owned Account).\n\n                **_Scenario#2 :_** The transaction is not a mint/transfer of a token.\n                * `onERC1155Received` and `onERC1155BatchReceived` MUST NOT be called outside of a mint or transfer process.\n\n                **_Scenario#3 :_** The receiver does not implement the necessary `ERC1155TokenReceiver` interface function(s).\n                * The transfer MUST be reverted with the one caveat below.\n                    - If the token(s) being sent are part of a hybrid implementation of another standard, that particular standard\'s rules on sending to a contract MAY now be followed instead. See "Backwards Compatibility" section.\n\n                **_Scenario#4 :_** The receiver implements the necessary `ERC1155TokenReceiver` interface function(s) but returns an unknown value.\n                * The transfer MUST be reverted.\n\n                **_Scenario#5 :_** The receiver implements the necessary `ERC1155TokenReceiver` interface function(s) but throws an error.\n                * The transfer MUST be reverted.\n\n                **_Scenario#6 :_** The receiver implements the `ERC1155TokenReceiver` interface and is the recipient of one and only one balance change (e.g. `safeTransferFrom` called).\n                * The balances for the transfer MUST have been updated before the `ERC1155TokenReceiver` hook is called on a recipient contract.\n                * The transfer event MUST have been emitted to reflect the balance changes before the `ERC1155TokenReceiver` hook is called on the recipient contract.\n                * One of `onERC1155Received` or `onERC1155BatchReceived` MUST be called on the recipient contract.\n                * The `onERC1155Received` hook SHOULD be called on the recipient contract and its rules followed.\n                    - See "onERC1155Received rules" for further rules that MUST be followed.\n                * The `onERC1155BatchReceived` hook MAY be called on the recipient contract and its rules followed.\n                    - See "onERC1155BatchReceived rules" for further rules that MUST be followed.\n\n                **_Scenario#7 :_** The receiver implements the `ERC1155TokenReceiver` interface and is the recipient of more than one balance change (e.g. `safeBatchTransferFrom` called).\n                * All balance transfers that are referenced in a call to an `ERC1155TokenReceiver` hook MUST be updated before the `ERC1155TokenReceiver` hook is called on the recipient contract.\n                * All transfer events MUST have been emitted to reflect current balance changes before an `ERC1155TokenReceiver` hook is called on the recipient contract.\n                * `onERC1155Received` or `onERC1155BatchReceived` MUST be called on the recipient as many times as necessary such that every balance change for the recipient in the scenario is accounted for.\n                    - The return magic value for every hook call MUST be checked and acted upon as per "onERC1155Received rules" and "onERC1155BatchReceived rules".\n                * The `onERC1155BatchReceived` hook SHOULD be called on the recipient contract and its rules followed.    \n                    - See "onERC1155BatchReceived rules" for further rules that MUST be followed.\n                * The `onERC1155Received` hook MAY be called on the recipient contract and its rules followed.    \n                    - See "onERC1155Received rules" for further rules that MUST be followed.\n                    \n                **_Scenario#8 :_** You are the creator of a contract that implements the `ERC1155TokenReceiver` interface and you forward the token(s) onto another address in one or both of `onERC1155Received` and `onERC1155BatchReceived`.\n                * Forwarding should be considered acceptance and then initiating a new `safeTransferFrom` or `safeBatchTransferFrom` in a new context.\n                    - The prescribed keccak256 acceptance value magic for the receiver hook being called MUST be returned after forwarding is successful.\n                * The `_data` argument MAY be re-purposed for the new context.\n                * If forwarding fails the transaction MAY be reverted.\n                    - If the contract logic wishes to keep the ownership of the token(s) itself in this case it MAY do so.\n                    \n                **_Scenario#9 :_** You are transferring tokens via a non-standard API call i.e. an implementation specific API and NOT `safeTransferFrom` or `safeBatchTransferFrom`.\n                * In this scenario all balance updates and events output rules are the same as if a standard transfer function had been called.\n                    - i.e. an external viewer MUST still be able to query the balance via a standard function and it MUST be identical to the balance as determined by `TransferSingle` and `TransferBatch` events alone.\n                * If the receiver is a contract the `ERC1155TokenReceiver` hooks still need to be called on it and the return values respected the same as if a standard transfer function had been called. \n                    - However while the `safeTransferFrom` or `safeBatchTransferFrom` functions MUST revert if a receiving contract does not implement the `ERC1155TokenReceiver` interface, a non-standard function MAY proceed with the transfer.\n                    - See "Implementation specific transfer API rules".\n\n\n                #### Rules\n\n                **_safeTransferFrom rules:_**\n                * Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section).\n                * MUST revert if `_to` is the zero address.\n                * MUST revert if balance of holder for token `_id` is lower than the `_value` sent to the recipient.\n                * MUST revert on any other error.\n                * MUST emit the `TransferSingle` event to reflect the balance change (see "TransferSingle and TransferBatch event rules" section).\n                * After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "onERC1155Received rules" section).\n                    - The `_data` argument provided by the sender for the transfer MUST be passed with its contents unaltered to the `onERC1155Received` hook function via its `_data` argument.\n\n                **_safeBatchTransferFrom rules:_**\n                * Caller must be approved to manage all the tokens being transferred out of the `_from` account (see "Approval" section).\n                * MUST revert if `_to` is the zero address.\n                * MUST revert if length of `_ids` is not the same as length of `_values`.\n                * MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n                * MUST revert on any other error.\n                * MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "TransferSingle and TransferBatch event rules" section).\n                * The balance changes and events MUST occur in the array order they were submitted (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n                * After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` or `onERC1155BatchReceived` on `_to` and act appropriately (see "onERC1155Received and onERC1155BatchReceived rules" section).\n                    - The `_data` argument provided by the sender for the transfer MUST be passed with its contents unaltered to the `ERC1155TokenReceiver` hook function(s) via their `_data` argument.\n\n                **_TransferSingle and TransferBatch event rules:_**\n                * `TransferSingle` SHOULD be used to indicate a single balance transfer has occurred between a `_from` and `_to` pair.\n                    - It MAY be emitted multiple times to indicate multiple balance changes in the transaction, but note that `TransferBatch` is designed for this to reduce gas consumption.\n                    - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                    - The `_from` argument MUST be the address of the holder whose balance is decreased.\n                    - The `_to` argument MUST be the address of the recipient whose balance is increased.\n                    - The `_id` argument MUST be the token type being transferred.\n                    - The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n                    - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). See "Minting/creating and burning/destroying rules".\n                    - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address). See "Minting/creating and burning/destroying rules".\n                * `TransferBatch` SHOULD be used to indicate multiple balance transfers have occurred between a `_from` and `_to` pair.\n                    - It MAY be emitted with a single element in the list to indicate a singular balance change in the transaction, but note that `TransferSingle` is designed for this to reduce gas consumption.\n                    - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                    - The `_from` argument MUST be the address of the holder whose balance is decreased for each entry pair in `_ids` and `_values`.\n                    - The `_to` argument MUST be the address of the recipient whose balance is increased for each entry pair in `_ids` and `_values`.\n                    - The `_ids` array argument MUST contain the ids of the tokens being transferred.\n                    - The `_values` array argument MUST contain the number of token to be transferred for each corresponding entry in `_ids`.\n                    - `_ids` and `_values` MUST have the same length.\n                    - When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address). See "Minting/creating and burning/destroying rules".\n                    - When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address). See "Minting/creating and burning/destroying rules".\n                * The total value transferred from address `0x0` minus the total value transferred to `0x0` observed via the `TransferSingle` and `TransferBatch` events MAY be used by clients and exchanges to determine the "circulating supply" for a given token ID.\n                * To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the `TransferSingle` event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_value` of 0.\n                * All `TransferSingle` and `TransferBatch` events MUST be emitted to reflect all the balance changes that have occurred before any call(s) to `onERC1155Received` or `onERC1155BatchReceived`.\n                    - To make sure event order is correct in the case of valid re-entry (e.g. if a receiver contract forwards tokens on receipt) state balance and events balance MUST match before calling an external contract.\n\n                **_onERC1155Received rules:_**\n                - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                * The `_from` argument MUST be the address of the holder whose balance is decreased.\n                    - `_from` MUST be 0x0 for a mint.\n                * The `_id` argument MUST be the token type being transferred.\n                * The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\n                * The `_data` argument MUST contain the information provided by the sender for the transfer with its contents unaltered.\n                    - i.e. it MUST pass on the unaltered `_data` argument sent via the `safeTransferFrom` or `safeBatchTransferFrom` call for this transfer.\n                * The recipient contract MAY accept an increase of its balance by returning the acceptance magic value `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n                    - If the return value is `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` the transfer MUST be completed or MUST revert if any other conditions are not met for success.\n                * The recipient contract MAY reject an increase of its balance by calling revert.\n                    - If the recipient contract throws/reverts the transaction MUST be reverted.\n                * If the return value is anything other than `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` the transaction MUST be reverted.\n                * `onERC1155Received` (and/or `onERC1155BatchReceived`) MAY be called multiple times in a single transaction and the following requirements must be met:\n                    - All callbacks represent mutually exclusive balance changes.\n                    - The set of all calls to `onERC1155Received` and `onERC1155BatchReceived` describes all balance changes that occurred during the transaction in the order submitted.\n                * A contract MAY skip calling the `onERC1155Received` hook function if the transfer operation is transferring the token to itself.\n\n                **_onERC1155BatchReceived rules:_**\n                - The `_operator` argument MUST be the address of an account/contract that is approved to make the transfer (SHOULD be msg.sender).\n                * The `_from` argument MUST be the address of the holder whose balance is decreased.\n                    - `_from` MUST be 0x0 for a mint.    \n                * The `_ids` argument MUST be the list of tokens being transferred.\n                * The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in `_ids`) the holder balance is decreased by and match what the recipient balance is increased by.\n                * The `_data` argument MUST contain the information provided by the sender for the transfer with its contents unaltered.\n                    - i.e. it MUST pass on the unaltered `_data` argument sent via the `safeBatchTransferFrom` call for this transfer.\n                * The recipient contract MAY accept an increase of its balance by returning the acceptance magic value `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n                    - If the return value is `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` the transfer MUST be completed or MUST revert if any other conditions are not met for success.\n                * The recipient contract MAY reject an increase of its balance by calling revert.\n                    - If the recipient contract throws/reverts the transaction MUST be reverted.\n                * If the return value is anything other than `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` the transaction MUST be reverted.\n                * `onERC1155BatchReceived` (and/or `onERC1155Received`) MAY be called multiple times in a single transaction and the following requirements must be met:\n                    - All callbacks represent mutually exclusive balance changes.\n                    - The set of all calls to `onERC1155Received` and `onERC1155BatchReceived` describes all balance changes that occurred during the transaction in the order submitted.\n                * A contract MAY skip calling the `onERC1155BatchReceived` hook function if the transfer operation is transferring the token(s) to itself.\n                    \n                **_ERC1155TokenReceiver ERC-165 rules:_**\n                * The implementation of the ERC-165 `supportsInterface` function SHOULD be as follows:\n                    ```solidity\n                    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n                        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256(\'supportsInterface(bytes4)\'))`).\n                                interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) ^ bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).\n                    }\n                    ```\n                * The implementation MAY differ from the above but:\n                - It MUST return the constant value `true` if `0x01ffc9a7` is passed through the `interfaceID` argument. This signifies ERC-165 support.\n                - It MUST return the constant value `true` if `0x4e2312e0` is passed through the `interfaceID` argument. This signifies ERC-1155 `ERC1155TokenReceiver` support.\n                - It MUST NOT consume more than 10,000 gas.\n                    - This keeps it below the ERC-165 requirement of 30,000 gas, reduces the gas reserve needs and minimises possible side-effects of gas exhaustion during the call.\n\n                **_Implementation specific transfer API rules:_**\n                * If an implementation specific API function is used to transfer ERC-1155 token(s) to a contract, the `safeTransferFrom` or `safeBatchTransferFrom` (as appropriate) rules MUST still be followed if the receiver implements the `ERC1155TokenReceiver` interface. If it does not the non-standard implementation SHOULD revert but MAY proceed.    \n                * An example:\n                    1. An approved user calls a function such as `function myTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values);`.\n                    2. `myTransferFrom` updates the balances for `_from` and `_to` addresses for all `_ids` and `_values`.\n                    3. `myTransferFrom` emits `TransferBatch` with the details of what was transferred from address `_from` to address `_to`.\n                    4. `myTransferFrom` checks if `_to` is a contract address and determines that it is so (if not, then the transfer can be considered successful).\n                    5. `myTransferFrom` calls `onERC1155BatchReceived` on `_to` and it reverts or returns an unknown value (if it had returned `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` the transfer can be considered successful).    \n                    6. At this point `myTransferFrom` SHOULD revert the transaction immediately as receipt of the token(s) was not explicitly accepted by the `onERC1155BatchReceived` function.            \n                    7. If however `myTransferFrom` wishes to continue it MUST call `supportsInterface(0x4e2312e0)` on `_to` and if it returns the constant value `true` the transaction MUST be reverted, as it is now known to be a valid receiver and the previous acceptance step failed. \n                        - NOTE: You could have called `supportsInterface(0x4e2312e0)` at a previous step if you wanted to gather and act upon that information earlier, such as in a hybrid standards scenario.\n                    8. If the above call to `supportsInterface(0x4e2312e0)` on `_to` reverts or returns a value other than the constant value `true` the `myTransferFrom` function MAY consider this transfer successful.\n                        - __NOTE__: this MAY result in unrecoverable tokens if sent to an address that does not expect to receive ERC-1155 tokens.\n                * The above example is not exhaustive but illustrates the major points (and shows that most are shared with `safeTransferFrom` and `safeBatchTransferFrom`):\n                    - Balances that are updated MUST have equivalent transfer events emitted.\n                    - A receiver address has to be checked if it is a contract and if so relevant `ERC1155TokenReceiver` hook function(s) have to be called on it. \n                    - Balances (and events associated) that are referenced in a call to an `ERC1155TokenReceiver` hook MUST be updated (and emitted) before the `ERC1155TokenReceiver` hook is called.\n                    - The return values of the `ERC1155TokenReceiver` hook functions that are called MUST be respected if they are implemented.    \n                    - Only non-standard transfer functions MAY allow tokens to be sent to a recipient contract that does NOT implement the necessary `ERC1155TokenReceiver` hook functions. `safeTransferFrom` and `safeBatchTransferFrom` MUST revert in that case (unless it is a hybrid standards implementation see "Backwards Compatibility").\n\n                **_Minting/creating and burning/destroying rules:_**\n                * A mint/create operation is essentially a specialized transfer and MUST follow these rules:\n                    - To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the `TransferSingle` event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_value` of 0.\n                    - The "TransferSingle and TransferBatch event rules" MUST be followed as appropriate for the mint(s) (i.e. singles or batches) however the `_from` argument MUST be set to `0x0` (i.e. zero address) to flag the transfer as a mint to contract observers.\n                        - __NOTE:__ This includes tokens that are given an initial balance in the contract. The balance of the contract MUST also be able to be determined by events alone meaning initial contract balances (for eg. in construction) MUST emit events to reflect those balances too.            \n                * A burn/destroy operation is essentially a specialized transfer and MUST follow these rules:\n                    - The "TransferSingle and TransferBatch event rules" MUST be followed as appropriate for the burn(s) (i.e. singles or batches) however the `_to` argument MUST be set to `0x0` (i.e. zero address) to flag the transfer as a burn to contract observers.           \n                    - When burning/destroying you do not have to actually transfer to `0x0` (that is impl specific), only the `_to` argument in the event MUST be set to `0x0` as above.\n                * The total value transferred from address `0x0` minus the total value transferred to `0x0` observed via the `TransferSingle` and `TransferBatch` events MAY be used by clients and exchanges to determine the "circulating supply" for a given token ID.\n                * As mentioned above mint/create and burn/destroy operations are specialized transfers and so will likely be accomplished with custom transfer functions rather than `safeTransferFrom` or `safeBatchTransferFrom`. If so the "Implementation specific transfer API rules" section would be appropriate.   \n                    - Even in a non-safe API and/or hybrid standards case the above event rules MUST still be adhered to when minting/creating or burning/destroying.\n                * A contract MAY skip calling the `ERC1155TokenReceiver` hook function(s) if the mint operation is transferring the token(s) to itself. In all other cases the `ERC1155TokenReceiver` rules MUST be followed as appropriate for the implementation (i.e. safe, custom and/or hybrid). \n\n\n                ##### A solidity example of the keccak256 generated constants for the various magic values (these MAY be used by implementation):\n\n                ```solidity\n                bytes4 constant public ERC1155_ERC165 = 0xd9b67a26; // ERC-165 identifier for the main token standard.\n                bytes4 constant public ERC1155_ERC165_TOKENRECEIVER = 0x4e2312e0; // ERC-165 identifier for the `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) ^ bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).\n                bytes4 constant public ERC1155_ACCEPTED = 0xf23a6e61; // Return value from `onERC1155Received` call if a contract accepts receipt (i.e `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`).\n                bytes4 constant public ERC1155_BATCH_ACCEPTED = 0xbc197c81; // Return value from `onERC1155BatchReceived` call if a contract accepts receipt (i.e `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).\n                ```\n\n                ### Metadata\n\n                The URI value allows for ID substitution by clients. If the string `{id}` exists in any URI, clients MUST replace this with the actual token ID in hexadecimal form. This allows for a large number of tokens to use the same on-chain string by defining a URI once, for that large number of tokens.\n\n                * The string format of the substituted hexadecimal ID MUST be lowercase alphanumeric: `[0-9a-f]` with no 0x prefix.\n                * The string format of the substituted hexadecimal ID MUST be leading zero padded to 64 hex characters length if necessary.\n\n                Example of such a URI: `https://token-cdn-domain/{id}.json` would be replaced with `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json` if the client is referring to token ID 314592/0x4CCE0.\n\n                #### Metadata Extensions\n\n                The optional `ERC1155Metadata_URI` extension can be identified with the [ERC-165 Standard Interface Detection](./eip-165.md).\n\n                If the optional `ERC1155Metadata_URI` extension is included:\n                * The ERC-165 `supportsInterface` function MUST return the constant value `true` if `0x0e89341c` is passed through the `interfaceID` argument.\n                * _Changes_ to the URI MUST emit the `URI` event if the change can be expressed with an event (i.e. it isn\'t dynamic/programmatic).\n                    - An implementation MAY emit the `URI` event during a mint operation but it is NOT mandatory. An observer MAY fetch the metadata uri at mint time from the `uri` function if it was not emitted.    \n                * The `uri` function SHOULD be used to retrieve values if no event was emitted. \n                * The `uri` function MUST return the same value as the latest event for an `_id` if it was emitted.\n                * The `uri` function MUST NOT be used to check for the existence of a token as it is possible for an implementation to return a valid string even if the token does not exist.\n\n                ```solidity\n                pragma solidity ^0.5.9;\n\n                /**\n                    Note: The ERC-165 identifier for this interface is 0x0e89341c.\n                */\n                interface ERC1155Metadata_URI {\n                    /**\n                        @notice A distinct Uniform Resource Identifier (URI) for a given token.\n                        @dev URIs are defined in RFC 3986.\n                        The URI MUST point to a JSON file that conforms to the "ERC-1155 Metadata URI JSON Schema".        \n                        @return URI string\n                    */\n                    function uri(uint256 _id) external view returns (string memory);\n                }\n                ```\n\n                #### ERC-1155 Metadata URI JSON Schema\n\n                This JSON schema is loosely based on the "ERC721 Metadata JSON Schema", but includes optional formatting to allow for ID substitution by clients. If the string `{id}` exists in any JSON value, it MUST be replaced with the actual token ID, by all client software that follows this standard.\n\n                * The string format of the substituted hexadecimal ID MUST be lowercase alphanumeric: `[0-9a-f]` with no 0x prefix.\n                * The string format of the substituted hexadecimal ID MUST be leading zero padded to 64 hex characters length if necessary.\n\n                ```json\n                {\n                    "title": "Token Metadata",\n                    "type": "object",\n                    "properties": {\n                        "name": {\n                            "type": "string",\n                            "description": "Identifies the asset to which this token represents"\n                        },\n                        "decimals": {\n                            "type": "integer",\n                            "description": "The number of decimal places that the token amount should display - e.g. 18, means to divide the token amount by 1000000000000000000 to get its user representation."\n                        },\n                        "description": {\n                            "type": "string",\n                            "description": "Describes the asset to which this token represents"\n                        },\n                        "image": {\n                            "type": "string",\n                            "description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive."\n                        },\n                        "properties": {\n                            "type": "object",\n                            "description": "Arbitrary properties. Values may be strings, numbers, object or arrays."\n                        }\n                    }\n                }\n                ```\n\n                An example of an ERC-1155 Metadata JSON file follows. The properties array proposes some SUGGESTED formatting for token-specific display properties and metadata.\n\n                ```json\n                {\n                    "name": "Asset Name",\n                    "description": "Lorem ipsum...",\n                    "image": "https:\\/\\/s3.amazonaws.com\\/your-bucket\\/images\\/{id}.png",\n                    "properties": {\n                        "simple_property": "example value",\n                        "rich_property": {\n                            "name": "Name",\n                            "value": "123",\n                            "display_value": "123 Example Value",\n                            "class": "emphasis",\n                            "css": {\n                                "color": "#ffffff",\n                                "font-weight": "bold",\n                                "text-decoration": "underline"\n                            }\n                        },\n                        "array_property": {\n                            "name": "Name",\n                            "value": [1,2,3,4],\n                            "class": "emphasis"\n                        }\n                    }\n                }\n                ```\n\n                ##### Localization\n\n                Metadata localization should be standardized to increase presentation uniformity across all languages. As such, a simple overlay method is proposed to enable localization. If the metadata JSON file contains a `localization` attribute, its content MAY be used to provide localized values for fields that need it. The `localization` attribute should be a sub-object with three attributes: `uri`, `default` and `locales`. If the string `{locale}` exists in any URI, it MUST be replaced with the chosen locale by all client software.\n\n                ##### JSON Schema\n\n                ```json\n                {\n                    "title": "Token Metadata",\n                    "type": "object",\n                    "properties": {\n                        "name": {\n                            "type": "string",\n                            "description": "Identifies the asset to which this token represents",\n                        },\n                        "decimals": {\n                            "type": "integer",\n                            "description": "The number of decimal places that the token amount should display - e.g. 18, means to divide the token amount by 1000000000000000000 to get its user representation."\n                        },\n                        "description": {\n                            "type": "string",\n                            "description": "Describes the asset to which this token represents"\n                        },\n                        "image": {\n                            "type": "string",\n                            "description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive."\n                        },\n                        "properties": {\n                            "type": "object",\n                            "description": "Arbitrary properties. Values may be strings, numbers, object or arrays.",\n                        },\n                        "localization": {\n                            "type": "object",\n                            "required": ["uri", "default", "locales"],\n                            "properties": {\n                                "uri": {\n                                    "type": "string",\n                                    "description": "The URI pattern to fetch localized data from. This URI should contain the substring `{locale}` which will be replaced with the appropriate locale value before sending the request."\n                                },\n                                "default": {\n                                    "type": "string",\n                                    "description": "The locale of the default data within the base JSON"\n                                },\n                                "locales": {\n                                    "type": "array",\n                                    "description": "The list of locales for which data is available. These locales should conform to those defined in the Unicode Common Locale Data Repository (http://cldr.unicode.org/)."\n                                }\n                            }\n                        }\n                    }\n                }\n                ```\n\n                ##### Localized Sample\n\n                Base URI:\n                ```json\n                {\n                "name": "Advertising Space",\n                "description": "Each token represents a unique Ad space in the city.",\n                "localization": {\n                    "uri": "ipfs://QmWS1VAdMD353A6SDk9wNyvkT14kyCiZrNDYAad4w1tKqT/{locale}.json",\n                    "default": "en",\n                    "locales": ["en", "es", "fr"]\n                }\n                }\n                ```\n\n                es.json:\n                ```json\n                {\n                "name": "Espacio Publicitario",\n                "description": "Cada token representa un espacio publicitario único en la ciudad."\n                }\n                ```\n\n                fr.json:\n                ```json\n                {\n                "name": "Espace Publicitaire",\n                "description": "Chaque jeton représente un espace publicitaire unique dans la ville."\n                }\n                ```\n\n                ### Approval\n\n                The function `setApprovalForAll` allows an operator to manage one\'s entire set of tokens on behalf of the approver. To permit approval of a subset of token IDs, an interface such as [ERC-1761 Scoped Approval Interface](./eip-1761.md) is suggested.\n                The counterpart `isApprovedForAll` provides introspection into any status set by `setApprovalForAll`.\n\n                An owner SHOULD be assumed to always be able to operate on their own tokens regardless of approval status, so should SHOULD NOT have to call `setApprovalForAll` to approve themselves as an operator before they can operate on them.  \n\n                ## Rationale\n\n                ### Metadata Choices\n\n                The `symbol` function (found in the ERC-20 and ERC-721 standards) was not included as we do not believe this is a globally useful piece of data to identify a generic virtual item / asset and are also prone to collisions. Short-hand symbols are used in tickers and currency trading, but they aren\'t as useful outside of that space.\n\n                The `name` function (for human-readable asset names, on-chain) was removed from the standard to allow the Metadata JSON to be the definitive asset name and reduce duplication of data. This also allows localization for names, which would otherwise be prohibitively expensive if each language string was stored on-chain, not to mention bloating the standard interface. While this decision may add a small burden on implementers to host a JSON file containing metadata, we believe any serious implementation of ERC-1155 will already utilize JSON Metadata.\n\n                ### Upgrades\n\n                The requirement to emit `TransferSingle` or `TransferBatch` on balance change implies that a valid implementation of ERC-1155 redeploying to a new contract address MUST emit events from the new contract address to replicate the deprecated contract final state. It is valid to only emit a minimal number of events to reflect only the final balance and omit all the transactions that led to that state. The event emit requirement is to ensure that the current state of the contract can always be traced only through events. To alleviate the need to emit events when changing contract address, consider using the proxy pattern, such as described in [EIP-2535](./eip-2535.md). This will also have the added benefit of providing a stable contract address for users.\n\n                ### Design decision: Supporting non-batch\n\n                The standard supports `safeTransferFrom` and `onERC1155Received` functions because they are significantly cheaper for single token-type transfers, which is arguably a common use case.\n\n                ### Design decision: Safe transfers only\n\n                The standard only supports safe-style transfers, making it possible for receiver contracts to depend on `onERC1155Received` or `onERC1155BatchReceived` function to be always called at the end of a transfer.\n\n                ### Guaranteed log trace\n\n                As the Ethereum ecosystem continues to grow, many dapps are relying on traditional databases and explorer API services to retrieve and categorize data. The ERC-1155 standard guarantees that event logs emitted by the smart contract will provide enough data to create an accurate record of all current token balances. A database or explorer may listen to events and be able to provide indexed and categorized searches of every ERC-1155 token in the contract.\n\n                ### Approval\n\n                The function `setApprovalForAll` allows an operator to manage one\'s entire set of tokens on behalf of the approver. It enables frictionless interaction with exchange and trade contracts.\n\n                Restricting approval to a certain set of token IDs, quantities or other rules MAY be done with an additional interface or an external contract. The rationale is to keep the ERC-1155 standard as generic as possible for all use-cases without imposing a specific approval scheme on implementations that may not need it. Standard token approval interfaces can be used, such as the suggested [ERC-1761 Scoped Approval Interface](./eip-1761.md) which is compatible with ERC-1155.\n\n                ## Backwards Compatibility\n\n                There have been requirements during the design discussions to have this standard be compatible with existing standards when sending to contract addresses, specifically ERC-721 at time of writing.\n                To cater for this scenario, there is some leeway with the revert logic should a contract not implement the `ERC1155TokenReceiver` as per "Safe Transfer Rules" section above, specifically "Scenario#3 : The receiver does not implement the necessary `ERC1155TokenReceiver` interface function(s)".\n\n                Hence in a hybrid ERC-1155 contract implementation an extra call MUST be made on the recipient contract and checked before any hook calls to `onERC1155Received` or `onERC1155BatchReceived` are made.\n                Order of operation MUST therefore be:\n                1. The implementation MUST call the function `supportsInterface(0x4e2312e0)` on the recipient contract, providing at least 10,000 gas.\n                2. If the function call succeeds and the return value is the constant value `true` the implementation proceeds as a regular ERC-1155 implementation, with the call(s) to the `onERC1155Received` or `onERC1155BatchReceived` hooks and rules associated.\n                3. If the function call fails or the return value is NOT the constant value `true` the implementation can assume the recipient contract is not an `ERC1155TokenReceiver` and follow its other standard\'s rules for transfers. \n                \n                *__Note that a pure implementation of a single standard is recommended__* rather than a hybrid solution, but an example of a hybrid ERC-1155/ERC-721 contract is linked in the references section under implementations.\n\n                An important consideration is that even if the tokens are sent with another standard\'s rules the *__ERC-1155 transfer events MUST still be emitted.__* This is so the balances can still be determined via events alone as per ERC-1155 standard rules.\n\n                ## Usage\n\n                This standard can be used to represent multiple token types for an entire domain. Both fungible and non-fungible tokens can be stored in the same smart-contract.\n\n                ### Batch Transfers\n\n                The `safeBatchTransferFrom` function allows for batch transfers of multiple token IDs and values. The design of ERC-1155 makes batch transfers possible without the need for a wrapper contract, as with existing token standards. This reduces gas costs when more than one token type is included in a batch transfer, as compared to single transfers with multiple transactions.\n\n                Another advantage of standardized batch transfers is the ability for a smart contract to respond to the batch transfer in a single operation using `onERC1155BatchReceived`.\n\n                It is RECOMMENDED that clients and wallets sort the token IDs and associated values (in ascending order) when posting a batch transfer, as some ERC-1155 implementations offer significant gas cost savings when IDs are sorted. See [Horizon Games - Multi-Token Standard](https://github.com/horizon-games/multi-token-standard) "packed balance" implementation for an example of this.\n\n                ### Batch Balance\n\n                The `balanceOfBatch` function allows clients to retrieve balances of multiple owners and token IDs with a single call.\n\n                ### Enumerating from events\n\n                In order to keep storage requirements light for contracts implementing ERC-1155, enumeration (discovering the IDs and values of tokens) must be done using event logs. It is RECOMMENDED that clients such as exchanges and blockchain explorers maintain a local database containing the token ID, Supply, and URI at the minimum. This can be built from each TransferSingle, TransferBatch, and URI event, starting from the block the smart contract was deployed until the latest block.\n\n                ERC-1155 contracts must therefore carefully emit `TransferSingle` or `TransferBatch` events in any instance where tokens are created, minted, transferred or destroyed.\n\n                ### Non-Fungible Tokens\n\n                The following strategies are examples of how you MAY mix fungible and non-fungible tokens together in the same contract. The standard does NOT mandate how an implementation must do this. \n\n                ##### Split ID bits\n\n                The top 128 bits of the uint256 `_id` parameter in any ERC-1155 function MAY represent the base token ID, while the bottom 128 bits MAY represent the index of the non-fungible to make it unique.\n\n                Non-fungible tokens can be interacted with using an index based accessor into the contract/token data set. Therefore to access a particular token set within a mixed data contract and a particular non-fungible within that set, `_id` could be passed as `<uint128: base token id><uint128: index of non-fungible>`.\n\n                To identify a non-fungible set/category as a whole (or a fungible) you COULD just pass in the base id via the `_id` argument as `<uint128: base token id><uint128: zero>`. If your implementation uses this technique this naturally means the index of a non-fungible SHOULD be 1-based.\n\n                Inside the contract code the two pieces of data needed to access the individual non-fungible can be extracted with uint128(~0) and the same mask shifted by 128.\n\n                ```solidity\n                uint256 baseTokenNFT = 12345 << 128;\n                uint128 indexNFT = 50;\n\n                uint256 baseTokenFT = 54321 << 128;\n\n                balanceOf(msg.sender, baseTokenNFT); // Get balance of the base token for non-fungible set 12345 (this MAY be used to get balance of the user for all of this token set if the implementation wishes as a convenience).\n                balanceOf(msg.sender, baseTokenNFT + indexNFT); // Get balance of the token at index 50 for non-fungible set 12345 (should be 1 if user owns the individual non-fungible token or 0 if they do not).\n                balanceOf(msg.sender, baseTokenFT); // Get balance of the fungible base token 54321.\n                ```\n\n                Note that 128 is an arbitrary number, an implementation MAY choose how they would like this split to occur as suitable for their use case. An observer of the contract would simply see events showing balance transfers and mints happening and MAY track the balances using that information alone.\n                For an observer to be able to determine type (non-fungible or fungible) from an ID alone they would have to know the split ID bits format on a implementation by implementation basis.\n\n                The [ERC-1155 Reference Implementation](https://github.com/enjin/erc-1155) is an example of the split ID bits strategy.\n\n                ##### Natural Non-Fungible tokens\n\n                Another simple way to represent non-fungibles is to allow a maximum value of 1 for each non-fungible token. This would naturally mirror the real world, where unique items have a quantity of 1 and fungible items have a quantity greater than 1.\n\n            </eip>\n            '), type='text')], created_at=1717552142, incomplete_at=None, incomplete_details=None, metadata={}, object='thread.message', role='user', run_id=None, status=None, thread_id='thread_RS2QrBoSwn7QRUIdlOHfarIY')], object='list', first_id='msg_1PkyRHRL545WcmQoSTZNYU2K', last_id='msg_QBhTfyg8HD7EhokC8GatST73', has_more=False)