run,time_taken,iterations,verified,annotated_contract,status
1,52.9728569984436,1,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition _owner != address(0) || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition _owners.length == _ids.length || batchBalances.length == __verifier_old_uint(batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition _owner == msg.sender || approved == __verifier_old_bool(_operatorApprovals[_owner][_operator])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _from == address(0) || __verifier_old_uint(_balances[_id][_from]) >= _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_from == address(0) || __verifier_old_uint(_balances[_ids[i]][_from]) >= _values[i])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
",[]
2,115.24248456954956,3,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition (_to != address(0) && __verifier_old_uint(_balances[_id][_from]) >= _value) || (_to == address(0) && _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]))
    /// @notice postcondition (_to != address(0) && __verifier_old_uint(_balances[_id][_from]) >= _value) || (_to != address(0) && _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]))
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
",[]
3,87.49617958068848,2,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition _owner != address(0) 
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition _owners.length == _ids.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _operator != msg.sender
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition forall (address op) !(op == _operator && op == _owner) || approved == __verifier_old_bool(_operatorApprovals[_owner][op])
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _value <= __verifier_old_uint(_balances[_id][_from]) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_value <= __verifier_old_uint(_balances[_id][_from]) ? _value : 0) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != address(0)
    /// @notice postcondition _ids.length == _values.length
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
","[""Interaction: 2\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: OK\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:132:5: Postcondition '_balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + (_value <= __verifier_old_uint(_balances[_id][_from]) ? _value : 0)' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n""]"
4,280.7693862915039,10,False,,[]
5,272.94369626045227,10,False,,[]
6,146.08523631095886,4,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition _owner != address(0) || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition _owners.length == _ids.length || batchBalances.length == __verifier_old_uint(batchBalances.length)
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || _operatorApprovals[msg.sender][_operator] == __verifier_old_bool(_operatorApprovals[msg.sender][_operator])
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator] || approved == __verifier_old_bool(approved)
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    /// @notice postcondition _to != address(0) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_to != address(0) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]))
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || (_to != address(0) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]))
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
","[""Interaction: 4\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]])' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: OK\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n""]"
7,92.17166233062744,2,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == _balances[_ids[i]][_owners[i]]
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0)
    /// @notice postcondition !(msg.sender == _from && _value > __verifier_old_uint(_balances[_id][_from])) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition !(msg.sender == _from && _value > __verifier_old_uint(_balances[_id][_from])) || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition _to != address(0)
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || !(msg.sender == _from && _values[i] > __verifier_old_uint(_balances[_ids[i]][_from])) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || !(msg.sender == _from && _values[i] > __verifier_old_uint(_balances[_ids[i]][_from])) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
","[""Interaction: 2\nError while running verifier, details:\n----- Verifier output -----\n\n---------------------------\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: OK\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '_value <= _balances[_id][_from]' might not hold at end of function.\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '_balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value' might not hold at end of function.\nERC1155::safeBatchTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:154:5: Postcondition 'forall (uint i) !(0 <= i && i < _ids.length) || _values[i] <= _balances[_ids[i]][_from]' might not hold at end of function.\nERC1155::_burn: ERROR\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n""]"
8,321.56148386001587,10,False,,"[""Interaction: 4\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]])' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '_value == _balances[_id][_to] - __verifier_old_uint(_balances[_id][_to]) || _to == address(0)' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 5\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]])' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '_value == _balances[_id][_to] - __verifier_old_uint(_balances[_id][_to]) || (_to == address(0) && _value == 0)' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 6\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || (_owners[i] != address(0) && batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]]))' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '_value == _balances[_id][_to] - __verifier_old_uint(_balances[_id][_to]) || (_to == address(0) && _value == 0) || (_value == 0 && _from != address(0))' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 7\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || (_owners[i] != address(0) && batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]]))' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '(_value == 0 && _from != address(0)) || (_value == _balances[_id][_to] - __verifier_old_uint(_balances[_id][_to]) || _to == address(0))' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 8\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || (_owners[i] != address(0) && batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]]))' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '(_value == 0 && _from != address(0)) || (_value == __verifier_old_uint(_balances[_id][_to]) - _balances[_id][_to] || _to == address(0))' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 9\nError while running verifier, details:\n----- Verifier output -----\nIllegal instruction\n\n---------------------------\nAddress::isContract: ERROR\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || (_owners[i] != address(0) && batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]]))' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '(_value == 0 && _from != address(0)) || (_value == __verifier_old_uint(_balances[_id][_to]) - _balances[_id][_to] || _to == address(0))' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n"", ""Interaction: 10\nContext::[implicit_constructor]: OK\nERC1155::[constructor]: OK\nERC1155::uri: OK\nERC1155::balanceOf: OK\nERC1155::balanceOfBatch: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:84:5: Postcondition 'forall (uint i) !(0 <= i && i < _owners.length) || (_owners[i] == address(0) && batchBalances[i] == 0) || (_owners[i] != address(0) && batchBalances[i] == __verifier_old_uint(_balances[_ids[i]][_owners[i]]))' might not hold at end of function.\nERC1155::setApprovalForAll: OK\nERC1155::isApprovedForAll: OK\nERC1155::safeTransferFrom: ERROR\n - ./solc_verify_generator/ERC1155/imp/ERC1155_merge.sol:131:5: Postcondition '(_value == 0 && _from != address(0)) || (_value == __verifier_old_uint(_balances[_id][_to]) - _balances[_id][_to]) || (_to == address(0) && _value == 0)' might not hold at end of function.\nERC1155::safeBatchTransferFrom: OK\nERC165::supportsInterface: OK\nERC165::[implicit_constructor]: OK\nIERC1155::[implicit_constructor]: OK\nIERC1155MetadataURI::[implicit_constructor]: OK\nIERC1155Receiver::[implicit_constructor]: OK\nIERC165::[implicit_constructor]: OK\nUse --show-warnings to see 18 warnings.\nErrors were found by the verifier.\n\n""]"
9,113.87655925750732,3,True,"pragma solidity >= 0.5.0;

contract ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // Mapping from token ID to account balances
    mapping (uint256 => mapping(address => uint256)) private _balances;

    // Mapping from account to operator approvals
    mapping (address => mapping(address => bool)) private _operatorApprovals;

    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json
    string private _uri;

    /**
     * @dev See {IERC1155-balanceOf}.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    /// @notice postcondition _owner != address(0) || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /**
     * @dev See {IERC1155-balanceOfBatch}.
     *
     * Requirements:
     *
     * - `accounts` and `ids` must have the same length.
     */
    /// @notice postcondition _owners.length == _ids.length || batchBalances.length == __verifier_old_uint(batchBalances.length)
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /**
     * @dev See {IERC1155-setApprovalForAll}.
     */
    /// @notice postcondition _approved == _operatorApprovals[msg.sender][_operator] || __verifier_old_bool(_operatorApprovals[msg.sender][_operator]) == _approved
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition _to != address(0) || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]
    /// @notice postcondition forall (uint i) !(0 <= i && i < _ids.length) || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;
}
",[]
10,249.56686758995056,10,False,,[]
