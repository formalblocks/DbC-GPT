run,time_taken,iterations,verified,annotated_contract,function_status,status,threads
1,380.52732491493225,19,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) _owner != _owner || balance == __verifier_old_uint(_balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || __verifier_old_bool(_operatorApprovals[addr][_operator]) == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition forall (address addr) !(addr == _from) || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr]) - _value || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr])
    /// @notice postcondition forall (address addr) _from != addr || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr]) - _value || addr == _to || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr])
    /// @notice postcondition _to == _from || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value
    /// @notice postcondition _to != _from || _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to])
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from != _to || __verifier_old_uint(_balances[_ids[i]][_from]) == _balances[_ids[i]][_from]
    /// @notice postcondition forall (uint j) !(0 <= j && j < _ids.length) || _balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j] || _from == _to
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || _balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k] || _balances[_ids[k]][_from] == __verifier_old_uint(_balances[_ids[k]][_from])
    /// @notice postcondition _to != address(0)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_AYaYEBFLpmHTX8wP5iUT9VaN', 'thread_SdB6Caskww5c0QjcnjGfgSZt', 'thread_LCvfoW9w4rlG5C6pw4QvWx52', 'thread_xhgjs9kARhuf9aZfl4PkpYc0', 'thread_TLwy3yV2M6UpNJD2mG9aAgQT', 'thread_FfUc8Em9KtqoSf9fPFuHZo5B']"
2,1126.0064401626587,30,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[_id][_owner]) == _balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || __verifier_old_bool(_operatorApprovals[addr][_operator]) == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition forall (address addr) addr == _to || addr == _from || _balances[_id][addr] == __verifier_old_uint(_balances[_id][addr])
    /// @notice postcondition _from == _to || _balances[_id][_from] == __verifier_old_uint(_balances[_id][_from]) - _value
    /// @notice postcondition _balances[_id][_to] == __verifier_old_uint(_balances[_id][_to]) + _value || _from == _to
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Verified', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_oieRYUSyFSZVrg9k6yZK29p7', 'thread_BisIS7wTStm8DxCZLpoWiNBT', 'thread_MA57j5f26cjpG9RLM5ouFt4z', 'thread_q4smmqtqy77evg2JcMXQgPfF', 'thread_KGaMoWvR9pBP0cy9PHiacd8X', 'thread_i01UQoVhMGGxGblOYLpMJCWy']"
3,743.7185397148132,36,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address addr) _owner != addr || balance == _balances[_id][addr]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || __verifier_old_bool(_operatorApprovals[addr][_operator]) == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_L4QL3WZqEcfsy6ib0LAM3IRU', 'thread_dKmnI4tNC1JhUBfGIPq5PsUv', 'thread_MxaYC8eU5hSLT74TTccV5CXH', 'thread_vJao6zBII44CUspxRFCWsYlf', 'thread_ZjaShCAPdwEDmhXdZOLUIuaC', 'thread_gKBXDc6JInbBQPcn3QptnzRL']"
4,605.5698788166046,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_balances[x][_owner] == __verifier_old_uint(_balances[x][_owner]))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]  || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _from == _to || _balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j] || !(0 <= j && j < _ids.length)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_Yi0r4wxBQ67kMUCyDLnSbI5A', 'thread_RPunao5871dIf3d7ImCD7Gt4', 'thread_uu5ipkKRKlctp1ez4kplG7zn', 'thread_DahLcRiZK8FI9YSvye6Jb9Xp', 'thread_pjdaIR6SoQRP7bZwzXWglWIN', 'thread_CKeKeio1yqQyWA5zFMcSsk31']"
5,908.7074439525604,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (address addr) _owner != addr || balance == _balances[_id][addr]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]  || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _to == _from || _balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j]  || !(0 <= j && j < _ids.length)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_l20YlgC0Li0XKOaUD41GNAMG', 'thread_RTLL0liaC1TQjyu3hD1XavFu', 'thread_nbTcd2B7UEjO1jkMsbJQyH9f', 'thread_buiFE5Q7EIyCgxa7heHh0Tzf', 'thread_GacZnXAe0ePdb8XRlOXsTkBS', 'thread_TR3OJ1t9c2vm9ts23pctG588']"
6,566.2409753799438,34,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[_id][_owner]) == _balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i]  || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _from != _to || _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] || !(0 <= j && j < _ids.length)
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || (_from == _to) || (__verifier_old_uint(_balances[_ids[k]][_from]) >= _values[k])
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_n47ZX1AIrY58YxSP05q2YX7y', 'thread_KbyQxqEQGU5dSqOZiP4jmfeg', 'thread_rgGCOsVz32foUeuybEXWuMks', 'thread_AiMWcjD8K4WmgzTcr9ElXAAl', 'thread_CaQrP2SGLd18YPJg5Fhd2Scm', 'thread_ArG0f9DykZlR3BvOA4ixZz4j']"
7,482.7311980724335,27,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address addr) !(addr != msg.sender) || __verifier_old_bool(_operatorApprovals[addr][_operator]) == _operatorApprovals[addr][_operator]
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _from != _to || _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) - _values[j] || !(0 <= j && j < _ids.length)
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || _balances[_ids[k]][_from] >= __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_IVu55VcFaKf1lAQc3V5byHbj', 'thread_nstnI9BEDPHEK5aKUwZvi6fQ', 'thread_6UJgduYR9hpir0EFvvrb1BPt', 'thread_Pp0GSLzsscANM1OnmRppTdTp', 'thread_zlg0ysuvpeRofN5OyIp2zorZ', 'thread_DHrJUGY29iod8F5pHEDzz1ov']"
8,586.6757736206055,36,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[_id][_owner]) == _balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_from] == __verifier_old_uint(_balances[_ids[i]][_from]) - _values[i]  || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _to == _from || _balances[_ids[j]][_to] == __verifier_old_uint(_balances[_ids[j]][_to]) + _values[j]  || !(0 <= j && j < _ids.length)
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_LAwC3rIh4ItaMH5tV6cMJoBJ', 'thread_N1nUOUajM1L9VeEWOw8kbLM0', 'thread_rr1wzs44uXlOMFcfl8apUMwA', 'thread_Jmno7oGx61son1UcC544BTLg', 'thread_VQGpc8SiStnaV7XaK5ZYvaVB', 'thread_ZKC1wZgtnt4ffoj6fhtfCAEM']"
9,623.140127658844,40,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (__verifier_old_uint(_balances[_id][_owner]) == _balances[_id][_owner])
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    /// @notice postcondition forall (address addr) !(addr == msg.sender) || (__verifier_old_bool(_operatorApprovals[addr][_operator]) != _approved) || (_operatorApprovals[addr][_operator] == __verifier_old_bool(_operatorApprovals[addr][_operator]))
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition true
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Verified', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Failed'}",[],"['thread_39RXwKF6JrMovR0cyacOnSu9', 'thread_PHujmf7znnTTC8U2YW7qnV4W', 'thread_DcZaWpa6VXwKbDeWjLv5pVKY', 'thread_bpxxPyUUYeyhx04UDTfuvzT3', 'thread_AwRGm52rW2E6jAFiSf4Lx9AO', 'thread_5EuEtwBlw7MoQ5Hv1tPboTAf']"
10,708.568202495575,35,False,"pragma solidity >= 0.5.0;

contract ERC1155 {

    // Events
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event URI(string value, uint256 indexed id);

    // State Variables
    string private _uri;

    // Functions
    /// @notice postcondition balance == _balances[_id][_owner]
    /// @notice postcondition forall (uint x) !(0 <= x && x < _id) || (_balances[x][_owner] == __verifier_old_uint(_balances[x][_owner]))
    function balanceOf(address _owner, uint256 _id) public view returns (uint256 balance);

    /// @notice postcondition true
    function balanceOfBatch(address[] memory _owners, uint256[] memory _ids) public view returns (uint256[] memory batchBalances);

    /// @notice postcondition true
    function setApprovalForAll(address _operator, bool _approved) public;

    /// @notice postcondition approved == _operatorApprovals[_owner][_operator]
    function isApprovedForAll(address _owner, address _operator) public view returns (bool approved);

    /// @notice postcondition true
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) public;

    /// @notice postcondition forall (uint i) _from == _to || _balances[_ids[i]][_to] == __verifier_old_uint(_balances[_ids[i]][_to]) + _values[i] || !(0 <= i && i < _ids.length)
    /// @notice postcondition forall (uint j) _from != _to || _balances[_ids[j]][_from] == __verifier_old_uint(_balances[_ids[j]][_from]) || !(0 <= j && j < _ids.length)
    /// @notice postcondition forall (uint k) !(0 <= k && k < _ids.length) || _balances[_ids[k]][_from] >= __verifier_old_uint(_balances[_ids[k]][_from]) - _values[k]
    function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _values) public;

}
","{'balanceOf': 'Verified', 'balanceOfBatch': 'Failed', 'setApprovalForAll': 'Failed', 'isApprovedForAll': 'Verified', 'safeTransferFrom': 'Failed', 'safeBatchTransferFrom': 'Verified'}",[],"['thread_mZcNvWGIgn77FiFYrYyIUpND', 'thread_eE9d1k3NTlm4EN5OOOd7D4G2', 'thread_7lDH0Uy5xTQVx2qZwJp8l9LU', 'thread_4mWiA6LZuS7uFWx3jaM5buod', 'thread_9jlXuZhkMDjnuTKLw8GJhB4u', 'thread_4qUhOATaFdB9HGGdNIukrbOt']"
