run,time_taken,iterations,verified,annotated_contract,status
1,41.934974670410156,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
2,35.611672163009644,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
3,31.937617301940918,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
4,32.004091024398804,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
5,31.758339166641235,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to)
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to)
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
6,32.391905784606934,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to)
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to)
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
7,34.13057518005371,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
8,34.32699203491211,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to)
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to)
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
9,35.86323809623718,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
10,36.877638816833496,0,True,"pragma solidity >=0.5.0;

contract IERC721 {

    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    mapping (uint256 => address) private _tokenOwner;

    mapping (uint256 => address) private _tokenApprovals;

    mapping (address => uint256) private _ownedTokensCount;

    mapping (address => mapping (address => bool)) private _operatorApprovals;

    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    /// @notice postcondition _ownedTokensCount[_owner] == balance
    function balanceOf(address _owner) external view returns (uint256 balance);

    /// @notice postcondition _tokenOwner[_tokenId] == _owner
    /// @notice postcondition _owner != address(0)
    function ownerOf(uint256 _tokenId) external view returns (address _owner);

    /// @notice postcondition _tokenApprovals[_tokenId] == _approved
    function approve(address _approved, uint256 _tokenId) external;

    /// @notice postcondition _tokenOwner[_tokenId] != address(0)
    /// @notice postcondition _tokenApprovals[_tokenId] == approved
    function getApproved(uint256 _tokenId) external view returns (address approved);

    /// @notice postcondition _operatorApprovals[msg.sender][_operator] == _approved
    function setApprovalForAll(address _operator, bool _approved) external;

    /// @notice postcondition _operatorApprovals[_owner][_operator] == approved
    function isApprovedForAll(address _owner, address _operator) external view returns (bool);

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;

    /// @notice postcondition ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) - 1 && _from != _to ) || ( _ownedTokensCount[_from] == __verifier_old_uint(_ownedTokensCount[_from]) && _from == _to )
    /// @notice postcondition ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) + 1 && _from != _to ) || ( _ownedTokensCount[_to] == __verifier_old_uint(_ownedTokensCount[_to]) && _from == _to )
    /// @notice postcondition _tokenOwner[_tokenId] == _to
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;
}
",[]
