run,time_taken,iterations,verified,annotated_contract,status
1,22.516204118728638,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
2,31.019784927368164,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
3,26.264490842819214,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
4,23.054029941558838,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value  &&  success) || ( _allowed[msg.sender][_spender] ==  __verifier_old_uint ( _allowed[msg.sender][_spender] ) && !success )
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
5,23.80592703819275,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success) ||  _from  == msg.sender
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
6,22.77863574028015,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
7,24.610103368759155,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
8,25.17483401298523,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
9,26.75119137763977,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success ) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) && !success )
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
10,46.10859537124634,0,True,"pragma solidity >=0.5.0;

contract ERC20 {

    mapping (address => uint) _balances;
    mapping (address => mapping (address => uint)) _allowed;
    uint public _totalSupply;

    /// @notice postcondition supply == _totalSupply
    function totalSupply() public view returns (uint256 supply);

    /// @notice  postcondition ( ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) - _value  && msg.sender  != _to ) || ( _balances[msg.sender] ==  __verifier_old_uint ( _balances[msg.sender] ) && msg.sender  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  && msg.sender  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) && msg.sender  == _to ) )
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition ( ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) - _value  &&  _from  != _to ) || ( _balances[_from] ==  __verifier_old_uint ( _balances[_from] ) &&  _from  == _to ) )
    /// @notice  postcondition ( ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) + _value  &&  _from  != _to ) || ( _balances[_to] ==  __verifier_old_uint ( _balances[_to] ) &&  _from  == _to ) )
    /// @notice  postcondition ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender] ) - _value && success) || ( _allowed[_from][msg.sender] ==  __verifier_old_uint ( _allowed[_from][msg.sender]) && !success)
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @notice  postcondition (_allowed[msg.sender][_spender] == _value && success) || (_allowed[msg.sender][_spender] == __verifier_old_uint(_allowed[msg.sender][_spender]) && !success)
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @notice postcondition _balances[_owner] == balance
    function balanceOf(address _owner) public view returns (uint256 balance);

    /// @notice postcondition _allowed[_owner][_spender] == remaining
    function allowance(address _owner, address _spender) public view returns (uint256 remaining);
}
",[]
